// This file is auto-generated by @hey-api/openapi-ts

export type ChangeDetailType = 'NoChange' | 'Create' | 'Update' | 'Delete' | 'Error' | 'Warning';

export const ChangeDetailType = {
    NO_CHANGE: 'NoChange',
    CREATE: 'Create',
    UPDATE: 'Update',
    DELETE: 'Delete',
    ERROR: 'Error',
    WARNING: 'Warning'
} as const;

export type ChangeType = 'NoChange' | 'Create' | 'Import' | 'Export' | 'Update' | 'Delete' | 'WillChange' | 'Information' | 'Rolledback' | 'Fail' | 'ImportFail' | 'Mismatch' | 'ParentMissing' | 'Hidden' | 'Clean' | 'Removed';

export const ChangeType = {
    NO_CHANGE: 'NoChange',
    CREATE: 'Create',
    IMPORT: 'Import',
    EXPORT: 'Export',
    UPDATE: 'Update',
    DELETE: 'Delete',
    WILL_CHANGE: 'WillChange',
    INFORMATION: 'Information',
    ROLLEDBACK: 'Rolledback',
    FAIL: 'Fail',
    IMPORT_FAIL: 'ImportFail',
    MISMATCH: 'Mismatch',
    PARENT_MISSING: 'ParentMissing',
    HIDDEN: 'Hidden',
    CLEAN: 'Clean',
    REMOVED: 'Removed'
} as const;

export type EventMessageTypeModel = 'Default' | 'Info' | 'Error' | 'Success' | 'Warning';

export const EventMessageTypeModel = {
    DEFAULT: 'Default',
    INFO: 'Info',
    ERROR: 'Error',
    SUCCESS: 'Success',
    WARNING: 'Warning'
} as const;

export type HandlerSettings = {
    enabled: boolean;
    actions: Array<(string)>;
    useFlatStructure: boolean;
    guidNames: boolean;
    failOnMissingParent: boolean;
    group: string;
    createClean: boolean;
    settings: {
        [key: string]: (string);
    };
};

export type HandlerStatus = 'Pending' | 'Processing' | 'Complete' | 'Error';

export const HandlerStatus = {
    PENDING: 'Pending',
    PROCESSING: 'Processing',
    COMPLETE: 'Complete',
    ERROR: 'Error'
} as const;

export type NotificationHeaderModel = {
    message: string;
    category: string;
    type: EventMessageTypeModel;
};

export type PerformActionRequest = {
    requestId: string;
    action: string;
    stepNumber: number;
    options?: ((uSyncOptions) | null);
};

export type PerformActionResponse = {
    requestId: string;
    status?: Array<(SyncHandlerSummary)> | null;
    actions?: Array<(uSyncActionView)> | null;
    complete: boolean;
};

export type SyncActionButton = {
    key: string;
    label: string;
    look: string;
    color: string;
    force: boolean;
    clean: boolean;
    children: Array<(SyncActionButton)>;
};

export type SyncActionGroup = {
    key: string;
    icon: string;
    groupName: string;
    buttons: Array<(SyncActionButton)>;
};

export type SyncHandlerSummary = {
    icon: string;
    name: string;
    status: HandlerStatus;
    changes: number;
    inError: boolean;
};

export type SyncLegacyCheckResponse = {
    hasLegacy: boolean;
    legacyFolder?: (string) | null;
    legacyTypes: Array<(string)>;
    latestFolder: string;
    latestVersion: string;
};

export type uSyncActionView = {
    key: string;
    name: string;
    handler: string;
    itemType: string;
    change: ChangeType;
    success: boolean;
    details: Array<(uSyncChange)>;
    message?: (string) | null;
};

export type uSyncAddonInfo = {
    version: string;
};

export type uSyncAddonSplash = {
    [key: string]: unknown;
};

export type uSyncChange = {
    success: boolean;
    name: string;
    path: string;
    oldValue: string;
    newValue: string;
    change: ChangeDetailType;
};

export type uSyncHandlerSetSettings = {
    enabled: boolean;
    handlerGroups: Array<(string)>;
    disabledHandlers: Array<(string)>;
    handlerDefaults: (HandlerSettings);
    handlers: {
        [key: string]: (HandlerSettings);
    };
    isSelectable: boolean;
};

export type uSyncOptions = {
    clientId: string;
    force: boolean;
    clean: boolean;
    group: string;
    set: string;
};

export type uSyncSettings = {
    rootFolder: string;
    folders: Array<(string)>;
    legacyFolder: string;
    isRootSite: boolean;
    lockRoot: boolean;
    lockRootTypes: Array<(string)>;
    defaultSet: string;
    importAtStartup: string;
    exportAtStartup: string;
    exportOnSave: string;
    uiEnabledGroups: string;
    reportDebug: boolean;
    addOnPing: boolean;
    rebuildCacheOnCompletion: boolean;
    failOnMissingParent: boolean;
    failOnDuplicates: boolean;
    cacheFolderKeys: boolean;
    showVersionCheckWarning: boolean;
    customMappings: {
        [key: string]: (string);
    };
    enableHistory: boolean;
    defaultExtension: string;
    importOnFirstBoot: boolean;
    firstBootGroup: string;
    disableDashboard: boolean;
    summaryDashboard: boolean;
    summaryLimit: number;
    hideAddOns: string;
    disableNotificationSuppression: boolean;
    backgroundNotifications: boolean;
};

export type GetActionsResponse = (Array<(SyncActionGroup)>);

export type PerformActionData = {
    requestBody?: (PerformActionRequest);
};

export type PerformActionResponse2 = ((PerformActionResponse));

export type CheckLegacyResponse = ((SyncLegacyCheckResponse));

export type CopyLegacyResponse = (boolean);

export type IgnoreLegacyResponse = (boolean);

export type GetAddOnsResponse = ((uSyncAddonInfo));

export type GetAddonSplashResponse = ((uSyncAddonSplash));

export type GetHandlerSetSettingsData = {
    id?: string;
};

export type GetHandlerSetSettingsResponse = ((uSyncHandlerSetSettings));

export type GetSettingsResponse = ((uSyncSettings));