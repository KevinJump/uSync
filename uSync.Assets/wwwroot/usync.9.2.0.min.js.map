{"version":3,"sources":["../../scripts/changedialog.controller.js","../../scripts/expansion.controller.js","../../scripts/settings.controller.js","../../scripts/usync.controller.js","../../scripts/usync.dashboard.controller.js","../../scripts/usync.hub.js","../../scripts/usync.progressview.component.js","../../scripts/usync.reportview.component.js","../../scripts/usync.service.js"],"names":["angular","module","controller","$scope","assetsService","vm","this","getTypeName","typeName","substring","lastIndexOf","item","model","loadJs","then","details","forEach","detail","index","oldValueDiff","oldValue","newValueDiff","newValue","oldValueJson","Object","JSON","stringify","newValueJson","diff","JsDiff","diffWords","close","pageTitle","change","itemType","name","uSync8DashboardService","loading","getAddOnSplash","result","addons","data","overlayService","notificationsService","working","readonly","docslink","umbracoVersion","Umbraco","Sys","ServerVariables","application","version","saveSettings","settings","success","error","Message","openAppSettingsOverlay","getChangedSettings","appSetting","uSync:","toPascal","o","newO","origKey","newKey","value","Array","map","toCamel","hasOwnProperty","charAt","toUpperCase","slice","toString","constructor","options","view","umbracoSettings","appPluginsPath","title","content","disableBackdropClick","disableEscKey","hideSubmitButton","submit","confirm","getSettings","setname","defaultSet","getHandlerSetSettings","handlerSet","$q","$controller","eventsService","editorService","uSyncHub","fresh","versionLoaded","reported","syncing","hideLink","showSpinner","showEverything","selection","groups","perf","showAdvanced","hasuSyncForms","canHaveForms","modes","NONE","REPORT","IMPORT","EXPORT","performAction","actionMethod","resolve","reject","getActionHandlers","status","handlers","message","action","startProcess","runHandlerAction","handler","alias","getClientId","results","concat","actions","changes","countChanges","length","finishProcess","performHandlerAction","report","group","resetStatus","getWarnings","reportButton","state","start","performance","now","reportHandler","ExceptionMessage","exceptionMessage","importForce","importItems","force","importButton","importHandler","importPost","emit","time","duration","moment","savings","show","humanize","x","godo","calculateTimeSaved","exportItems","exportGroup","exportButton","exportHandler","getSyncWarnings","warnings","importGroup","count","val","key","mode","showAll","runmode","Count","Total","Handlers","hub","active","update","undefined","$","connection","connectionId","reportAction","defaultButton","labelKey","subButtons","open","submitButtonLabel","closeButtonLabel","cleanExport","versionInfo","IsCurrent","umbType","indexOf","showChange","calcPercentage","openDetail","initHub","on","getHandlerGroups","_","icon","push","toLowerCase","getHandlers","checkVersion","$timeout","navigationService","selectNavigationItem","page","description","navigation","syncTree","tree","path","getAddOns","addOnString","addOns","insertOffset","splice","displayName","factory","$rootScope","starting","callbacks","scripts","umbracoPath","callback","promises","script","all","hubSetup","pop","signalR","HubConnectionBuilder","withUrl","uSync","signalRHub","withAutomaticReconnect","configureLogging","LogLevel","Warning","build","cb","catch","console","warn","e","cd","eventName","$apply","invoke","methodName","done","uSyncProgressViewComponent","templateUrl","applicationPath","bindings","hideLabels","controllerAs","total","component","uSyncReportViewComponent","hideAction","hideToggle","allowSelect","hasFailedDetail","some","getIcon","getChangeClass","classString","__selected","$onInit","apply","applyState","importItem","select","findIndex","$http","serviceRoot","uSyncService","get","set","clientId","post","clean","put","getLoadedHandlers"],"mappings":"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","file":"usync.9.2.0.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    function changeDialogController($scope, assetsService) {\r\n\r\n        var vm = this;\r\n        vm.item = $scope.model.item;\r\n\r\n        var jsdiff = 'lib/jsdiff/diff.min.js';\r\n\r\n        assetsService.loadJs(jsdiff, $scope).then(function () {\r\n            calcDiffs();\r\n        });\r\n\r\n        vm.close = close;\r\n        vm.getTypeName = getTypeName;\r\n        vm.pageTitle = pageTitle;\r\n\r\n        function close() {\r\n            if ($scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            return typeName.substring(typeName.lastIndexOf('.') + 1);\r\n        }\r\n\r\n        function pageTitle() {\r\n            return vm.item.change + ' ' + getTypeName(vm.item.itemType) + ' ' + vm.item.name;\r\n        }\r\n\r\n        function calcDiffs() {\r\n\r\n            vm.item.details.forEach(function (detail, index) {\r\n\r\n\r\n                let oldValueDiff = detail.oldValue === null ? \"\" : detail.oldValue;\r\n                let newValueDiff = detail.newValue === null ? \"\" : detail.newValue;\r\n\r\n                if (detail.oldValueJson instanceof Object) {\r\n                    oldValueDiff = JSON.stringify(detail.oldValue, null, 1);\r\n                }\r\n\r\n                if (detail.newValueJson instanceof Object) {\r\n                    newValueDiff = JSON.stringify(detail.newValue, null, 1);\r\n                }\r\n\r\n                detail.diff = JsDiff.diffWords(oldValueDiff, newValueDiff );\r\n            });\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncChangeDialogController', changeDialogController);\r\n})();","(function () {\r\n\r\n    'use strict';\r\n\r\n    function expansionController($scope, uSync8DashboardService) {\r\n\r\n        var vm = this;\r\n        vm.loading = true;\r\n        ///\r\n\r\n        uSync8DashboardService.getAddOnSplash()\r\n            .then(function (result) {\r\n                vm.addons = result.data;\r\n                vm.loading = false;\r\n            });\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncExpansionController', expansionController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function settingsController($scope,\r\n        uSync8DashboardService,\r\n        overlayService,\r\n        notificationsService) {\r\n\r\n        var vm = this;\r\n        vm.working = false;\r\n        vm.loading = true;\r\n        vm.readonly = true;\r\n\r\n        vm.docslink = \"https://docs.jumoo.co.uk/uSync/v9/settings/\";\r\n\r\n        vm.umbracoVersion = Umbraco.Sys.ServerVariables.application.version;\r\n\r\n        vm.saveSettings = saveSettings;\r\n        vm.openAppSettingsOverlay = openAppSettingsOverlay;\r\n\r\n        init();\r\n\r\n        ///////////\r\n\r\n        function init() {\r\n            getSettings();\r\n        }\r\n\r\n        ///////////\r\n        function getSettings() {\r\n\r\n            uSync8DashboardService.getSettings()\r\n                .then(function (result) {\r\n                    vm.settings = result.data;\r\n                    vm.loading = false;\r\n                    getHandlerSetSettings(vm.settings.defaultSet);\r\n                });\r\n        }\r\n\r\n        function getHandlerSetSettings(setname) {\r\n\r\n            uSync8DashboardService.getHandlerSetSettings(setname)\r\n                .then(function (result) {\r\n                    vm.handlerSet = result.data;\r\n                });\r\n\r\n        }\r\n\r\n\r\n        function saveSettings() {\r\n            vm.working = false;\r\n            uSync8DashboardService.saveSettings(vm.settings)\r\n                .then(function (result) {\r\n                    vm.working = false;\r\n                    notificationsService.success('Saved', 'Settings updated');\r\n                }, function (error) {\r\n                    notificationsService.error('Saving', error.data.Message);\r\n                });\r\n        }\r\n\r\n\r\n\r\n        function openAppSettingsOverlay() {\r\n\r\n            uSync8DashboardService.getChangedSettings()\r\n                .then(function (result) {\r\n                    var appSetting = {\r\n                        \"uSync:\": toPascal(result.data)\r\n                    }\r\n\r\n                    var options = {\r\n                        view: Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/settings.overlay.html',\r\n                        title: 'appsettings.json snipped',\r\n                        content: JSON.stringify(appSetting, null, 4),\r\n                        docslink: vm.docslink,\r\n                        disableBackdropClick: true,\r\n                        disableEscKey: true,\r\n                        hideSubmitButton: true,\r\n                        submit: function () {\r\n                            overlayService.close();\r\n                        }\r\n                    };\r\n\r\n                    overlayService.confirm(options);\r\n                });\r\n\r\n        }\r\n\r\n\r\n        function toPascal(o) {\r\n            var newO, origKey, newKey, value\r\n            if (o instanceof Array) {\r\n                return o.map(function (value) {\r\n                    if (typeof value === \"object\") {\r\n                        value = toCamel(value)\r\n                    }\r\n                    return value\r\n                })\r\n            } else {\r\n                newO = {}\r\n                for (origKey in o) {\r\n                    if (o.hasOwnProperty(origKey)) {\r\n                        newKey = (origKey.charAt(0).toUpperCase() + origKey.slice(1) || origKey).toString()\r\n                        value = o[origKey]\r\n                        if (value instanceof Array || (value !== null && value.constructor === Object)) {\r\n                            value = toPascal(value)\r\n                        }\r\n                        newO[newKey] = value\r\n                    }\r\n                }\r\n            }\r\n            return newO\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncSettingsController', settingsController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function uSyncController($scope, $q, $controller,\r\n        eventsService,\r\n        overlayService,\r\n        notificationsService,\r\n        editorService,\r\n        uSync8DashboardService,\r\n        uSyncHub) {\r\n\r\n        var vm = this;\r\n        vm.fresh = true;\r\n        vm.loading = true;\r\n        vm.versionLoaded = false; \r\n        vm.working = false;\r\n        vm.reported = false;\r\n        vm.syncing = false;\r\n        vm.hideLink = false;\r\n        vm.showSpinner = false;\r\n        vm.showEverything = true;\r\n\r\n        vm.selection = [];\r\n\r\n        vm.groups = [];\r\n        vm.perf = 0;\r\n\r\n        vm.showAdvanced = false;\r\n\r\n        vm.hasuSyncForms = false; \r\n\r\n        vm.canHaveForms = false;\r\n\r\n        var modes = {\r\n            NONE: 0,\r\n            REPORT: 1,\r\n            IMPORT: 2,\r\n            EXPORT: 3\r\n        };\r\n\r\n        vm.runmode = modes.NONE;\r\n\r\n        vm.showAll = false;\r\n        vm.status = {};\r\n        vm.reportAction = '';\r\n\r\n        vm.importButton = {\r\n            state: 'init',\r\n            defaultButton: {\r\n                labelKey: 'usync_import',\r\n                handler: importItems\r\n            },\r\n            subButtons: [{\r\n                labelKey: 'usync_importforce',\r\n                handler: function () {\r\n                    importForce('');\r\n                }\r\n            }]\r\n        };\r\n\r\n        vm.reportButton = {\r\n            state: 'init',\r\n            defaultButton: {\r\n                labelKey: 'usync_report',\r\n                handler: function () {\r\n                    report('');\r\n                }\r\n            },\r\n            subButtons: []\r\n        };\r\n\r\n        vm.exportButton = {\r\n            state: 'init',\r\n            defaultButton: {\r\n                labelKey: 'usync_export',\r\n                handler: function () {\r\n                    exportItems(false);\r\n                }\r\n            },\r\n            subButtons: [{\r\n                labelKey: 'usync_exportClean',\r\n                handler: function () {\r\n                    cleanExport();\r\n                }\r\n            }]\r\n        }\r\n\r\n        vm.report = report;\r\n        vm.versionInfo = {\r\n            IsCurrent: true\r\n        };\r\n\r\n        vm.exportItems = exportItems;\r\n        vm.importForce = importForce;\r\n        vm.importItems = importItems;\r\n        vm.importGroup = importGroup;\r\n        vm.exportGroup = exportGroup;\r\n\r\n        vm.getTypeName = getTypeName;\r\n\r\n        vm.showChange = showChange;\r\n        vm.countChanges = countChanges;\r\n        vm.calcPercentage = calcPercentage;\r\n        vm.openDetail = openDetail;\r\n\r\n        vm.savings = { show: false, title: \"\", message: \"\" };\r\n        vm.godo = [\r\n            { time: 0, message: \"Worth checking\" },\r\n            { time: 180, message: \"Go make a cup of tea\" },\r\n            { time: 300, message: \"Go have a quick chat\" },\r\n            { time: 900, message: \"Go for a nice walk outside 🚶‍♀️\" },\r\n            { time: 3600, message: \"You deserve a break\" }\r\n        ];\r\n\r\n        init();\r\n\r\n        function init() {\r\n            InitHub();\r\n            getHandlerGroups();\r\n\r\n            // just so there is something there when you start \r\n            uSync8DashboardService.getHandlers()\r\n                .then(function (result) {\r\n                    vm.handlers = result.data;\r\n                    vm.status.handlers = vm.handlers;\r\n                });\r\n\r\n            uSync8DashboardService.checkVersion()\r\n                .then(function (result) {\r\n                    vm.versionLoaded = true;\r\n                    vm.versionInfo = result.data;\r\n                });\r\n        }\r\n\r\n        function performAction(options, actionMethod, cb) {\r\n\r\n            return $q(function (resolve, reject) {\r\n                uSync8DashboardService.getActionHandlers(options)\r\n                    .then(function (result) {\r\n                        vm.status.handlers = result.data;\r\n                        performHandlerAction(vm.status.handlers, actionMethod, options, cb)\r\n                            .then(function () {\r\n                                resolve();\r\n                            }, function (error) {\r\n                                reject(error)\r\n                            })\r\n                    });\r\n            });\r\n        }\r\n\r\n        function performHandlerAction(handlers, actionMethod, options, cb) {\r\n\r\n   \r\n            return $q(function (resolve, reject) {\r\n\r\n                var index = 0;\r\n                vm.status.message = 'Starting ' + options.action;\r\n\r\n                uSync8DashboardService.startProcess(options.action)\r\n                    .then(function () {\r\n                        runHandlerAction(handlers[index])\r\n                    });\r\n\r\n                function runHandlerAction(handler) {\r\n\r\n                    vm.status.message = handler.name;\r\n\r\n                    handler.status = 1;\r\n                    actionMethod(handler.alias, options, getClientId())\r\n                        .then(function (result) {\r\n\r\n                            vm.results = vm.results.concat(result.data.actions);\r\n\r\n                            handler.status = 2;\r\n                            handler.changes = countChanges(result.data.actions);\r\n\r\n                            index++;\r\n                            if (index < handlers.length) {\r\n                                runHandlerAction(handlers[index]);\r\n                            }\r\n                            else {\r\n\r\n                                vm.status.message = 'Finishing ' + options.action;\r\n\r\n                                uSync8DashboardService.finishProcess(options.action, vm.results)\r\n                                    .then(function () {\r\n                                        resolve();\r\n                                    });\r\n                            }\r\n                        }, function (error) {\r\n                            // error in this handler ? \r\n                            // do we want to carry on with the other ones or just stop?\r\n                            reject(error);\r\n                        });\r\n                }\r\n            });\r\n        } \r\n\r\n        function report(group) {\r\n\r\n            vm.results = [];\r\n\r\n            resetStatus(modes.REPORT);\r\n            getWarnings('report');\r\n            vm.reportButton.state = 'busy';\r\n\r\n            var options = {\r\n                action: 'report',\r\n                group: group\r\n            };\r\n\r\n            var start = performance.now();\r\n\r\n            performAction(options, uSync8DashboardService.reportHandler)\r\n                .then(function (results) {\r\n                    vm.working = false;\r\n                    vm.reported = true;\r\n                    vm.perf = performance.now() - start;\r\n                    vm.status.message = 'Report complete';\r\n                    vm.reportButton.state = 'success';\r\n                }, function (error) {\r\n                    vm.reportButton.state = 'error';\r\n                    notificationsService.error('Error', error.data.ExceptionMessage ?? error.data.exceptionMessage);\r\n                });\r\n        }\r\n\r\n        function importForce(group) {\r\n            importItems(true, group);\r\n        }\r\n\r\n        function importItems(force, group) {\r\n            vm.results = [];\r\n            resetStatus(modes.IMPORT);\r\n            getWarnings('import');\r\n\r\n            vm.importButton.state = 'busy';\r\n\r\n            var options = {\r\n                action: 'import',\r\n                group: group,\r\n                force: force\r\n            };\r\n\r\n            var start = performance.now();\r\n\r\n            performAction(options, uSync8DashboardService.importHandler)\r\n                .then(function (results) {\r\n\r\n                    vm.status.message = 'Post import actions';\r\n\r\n                    uSync8DashboardService.importPost(vm.results, getClientId())\r\n                        .then(function (results) {\r\n                            vm.working = false;\r\n                            vm.reported = true;\r\n                            vm.perf = performance.now() - start;\r\n                            vm.importButton.state = 'success';\r\n                            eventsService.emit('usync-dashboard.import.complete');\r\n                            calculateTimeSaved(vm.results);\r\n                            vm.status.message = 'Complete';\r\n                        });\r\n                }, function (error) {\r\n                    notificationsService.error('Error', error.data.ExceptionMessage ?? error.data.exceptionMessage);\r\n                });\r\n        }\r\n\r\n        function exportItems() {\r\n            exportGroup('');\r\n        }\r\n\r\n        function exportGroup(group) {\r\n\r\n\r\n            vm.results = [];\r\n            resetStatus(modes.EXPORT);\r\n            vm.exportButton.state = 'busy';\r\n\r\n            var options = {\r\n                action: 'export',\r\n                group: group\r\n            };\r\n\r\n            var start = performance.now();\r\n\r\n            performAction(options, uSync8DashboardService.exportHandler)\r\n                .then(function (results) {\r\n                    vm.status.message = 'Export complete';\r\n                    vm.working = false;\r\n                    vm.reported = true;\r\n                    vm.perf = performance.now() - start;\r\n\r\n                    vm.exportButton.state = 'success';\r\n                    vm.savings.show = true;\r\n                    vm.savings.title = 'All items exported.';\r\n                    vm.savings.message = 'Now go wash your hands 🧼!';\r\n                    eventsService.emit('usync-dashboard.export.complete');\r\n                }, function (error) {\r\n                    notificationsService.error('Error', error.data.ExceptionMessage ?? error.data.exceptionMessage);\r\n                });\r\n        }\r\n     \r\n        function cleanExport() {\r\n\r\n            overlayService.open({\r\n                title: 'Clean Export',\r\n                content: 'Are you sure ? A clean export will delete all the contents of the uSync folder. You will loose any stored delete or rename actions.',\r\n                disableBackdropClick: true,\r\n                disableEscKey: true,\r\n                submitButtonLabel: 'Yes run a clean export',\r\n                closeButtonLabel: 'No, close',\r\n                submit: function () {\r\n                    overlayService.close();\r\n\r\n                    uSync8DashboardService.cleanExport()\r\n                        .then(function () {\r\n                            exportItems();\r\n                        });\r\n                },\r\n                close: function () {\r\n                    overlayService.close();\r\n                }\r\n            })\r\n        }\r\n\r\n        // add a little joy to the process.\r\n        function calculateTimeSaved(results) {\r\n            var changes = countChanges(results);\r\n            var time = changes * 26.5;\r\n\r\n            var duration = moment.duration(time, 'seconds');\r\n\r\n            if (time >= 180) {\r\n                vm.savings.show = true;\r\n                vm.savings.title = 'You just saved ' + duration.humanize() + \"!\";\r\n                vm.savings.message = '';\r\n\r\n                for (let x = 0; x < vm.godo.length; x++) {\r\n                    if (vm.godo[x].time < time) {\r\n                        vm.savings.message = vm.godo[x].message;\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //////////////\r\n\r\n        function getWarnings(action) {\r\n            uSync8DashboardService.getSyncWarnings(action)\r\n                .then(function (result) {\r\n                    vm.warnings = result.data;\r\n                });\r\n        }\r\n\r\n        vm.importGroup = {};\r\n\r\n        function getHandlerGroups() {\r\n            vm.showEverything = false; \r\n\r\n            uSync8DashboardService.getHandlerGroups()\r\n                .then(function (result) {\r\n                    _.forEach(result.data, function (icon, group) {\r\n                        if (group == '_everything') {\r\n                            vm.showEverything = true;\r\n                        }\r\n                        else {\r\n                            vm.groups.push({\r\n                                name: group,\r\n                                icon: icon,\r\n                                key: group.toLowerCase()\r\n                            });\r\n\r\n\r\n                            vm.importGroup[group] = {\r\n                                state: 'init',\r\n                                defaultButton: {\r\n                                    labelKey: 'usync_import',\r\n                                    handler: function () { importGroup(group) }\r\n                                },\r\n                                subButtons: [{\r\n                                    labelKey: 'usync_importforce',\r\n                                    handler: function () { importForce(group) }\r\n                                }]\r\n                            }\r\n\r\n                            if (group.toLowerCase() === \"forms\") {\r\n                                vm.hasuSyncForms = true;\r\n                            }\r\n                        }\r\n\r\n                    });\r\n\r\n                    if (!vm.hasuSyncForms) {\r\n                        vm.canHaveForms = canHaveForms();\r\n                    }\r\n\r\n                    vm.loading = false;\r\n                }, function (error) {\r\n                    vm.loading = false;\r\n                });\r\n        }\r\n\r\n        function importGroup(group) {\r\n            importItems(false, group);\r\n        }\r\n\r\n        //////////////\r\n\r\n        function openDetail(item) {\r\n\r\n            var options = {\r\n                item: item,\r\n                title: 'uSync Change',\r\n                view: Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/changeDialog.html',\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            };\r\n            editorService.open(options);\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            var umbType = typeName.substring(0, typeName.indexOf(','));\r\n            return umbType.substring(umbType.lastIndexOf('.') + 1);\r\n        }\r\n\r\n        function countChanges(changes) {\r\n            var count = 0;\r\n            angular.forEach(changes, function (val, key) {\r\n                if (val.change !== 'NoChange') {\r\n                    count++;\r\n                }\r\n            });\r\n\r\n            return count;\r\n        }\r\n\r\n        function calcPercentage(status) {\r\n            return (100 * status.count) / status.Total;\r\n        }\r\n\r\n        function showChange(change) {\r\n            return vm.showAll || (change !== 'NoChange' && change !== 'Removed');\r\n        }\r\n\r\n        function setFilter(type) {\r\n\r\n            if (vm.filter === type) {\r\n                vm.filter = '';\r\n            }\r\n            else {\r\n                vm.filter = type;\r\n            }\r\n        }\r\n\r\n        ///////////\r\n\r\n        /// resets all the flags, and messages to the start \r\n        function resetStatus(mode) {\r\n\r\n            vm.fresh = false;\r\n            vm.warnings = {};\r\n\r\n            vm.reported = vm.showAll = false;\r\n            vm.working = true;\r\n            vm.showSpinner = false; \r\n            vm.runmode = mode;\r\n            vm.hideLink = false;\r\n            vm.savings.show = false;\r\n\r\n            vm.status = {\r\n                Count: 0,\r\n                Total: 1,\r\n                Message: 'Initializing',\r\n                Handlers: vm.handlers\r\n            };\r\n\r\n            if (!vm.hub.active) {\r\n                vm.status.Message = 'Working ';\r\n                vm.showSpinner = true;\r\n            }\r\n\r\n            vm.update = {\r\n                Message: '',\r\n                Count: 0,\r\n                Total: 1\r\n            };\r\n\r\n            // performance timer. \r\n            vm.perf = 0;\r\n\r\n\r\n            switch (mode) {\r\n                case modes.IMPORT:\r\n                    vm.action = 'Import';\r\n                    break;\r\n                case mode.REPORT:\r\n                    vm.action = 'Report';\r\n                    break;\r\n                case mode.EXPORT:\r\n                    vm.action = 'Export';\r\n                    break;\r\n            }\r\n        }\r\n\r\n        ////// SignalR things \r\n        function InitHub() {\r\n            uSyncHub.initHub(function (hub) {\r\n\r\n                vm.hub = hub;\r\n\r\n                vm.hub.on('add', function (data) {\r\n                    vm.status = data;\r\n                });\r\n\r\n                vm.hub.on('update', function (update) {\r\n                    vm.update = update;\r\n                });\r\n\r\n                vm.hub.start();\r\n            });\r\n        }\r\n\r\n        function getClientId() {\r\n            if ($.connection !== undefined) {\r\n                return $.connection.connectionId;\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        function canHaveForms() {\r\n\r\n            if (vm.hasuSyncForms) return false;\r\n            /*\r\n\r\n            try {\r\n\r\n                // check to see if umbraco.forms is installed. \r\n                $controller('UmbracoForms.Dashboards.FormsController', { $scope: {} }, true)\r\n                return true;\r\n            }\r\n            catch {\r\n                return false;\r\n            }*/\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSync8Controller', uSyncController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function dashboardController($controller,\r\n        $scope, $timeout, navigationService, eventsService, uSync8DashboardService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.selectNavigationItem = function (item) {\r\n            eventsService.emit('usync-dashboard.tab.change', item);\r\n        }\r\n\r\n        vm.page = {\r\n            title: 'uSync',\r\n            description: '...',\r\n            navigation: [\r\n                {\r\n                    'name': 'uSync',\r\n                    'alias': 'uSync',\r\n                    'icon': 'icon-infinity',\r\n                    'view': Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/default.html',\r\n                    'active': true\r\n                },\r\n                {\r\n                    'name': 'Settings',\r\n                    'alias': 'settings',\r\n                    'icon': 'icon-settings',\r\n                    'view': Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/settings.html'\r\n                } \r\n            ]\r\n        };\r\n\r\n        $timeout(function () {\r\n            navigationService.syncTree({ tree: \"uSync\", path: \"-1\" });\r\n        });\r\n\r\n        uSync8DashboardService.getAddOns()\r\n            .then(function (result) {\r\n\r\n                vm.version = 'v' + result.data.version;\r\n                if (result.data.addOnString.length > 0) {\r\n                    vm.version += ' + ' + result.data.addOnString;\r\n                }\r\n\r\n                vm.page.description = vm.version;\r\n                vm.addOns = result.data.addOns;\r\n\r\n                var insertOffset = 1;\r\n                if (vm.version.indexOf('Complete') == -1) {\r\n                     insertOffset = 2;\r\n                     vm.page.navigation.push(\r\n                         {\r\n                             'name': 'Add ons',\r\n                             'alias': 'expansion',\r\n                             'icon': 'icon-box',\r\n                             'view': Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/expansion.html'\r\n                         });\r\n                }\r\n\r\n                vm.addOns.forEach(function (value, key) {\r\n                    if (value.view !== '') {\r\n                        vm.page.navigation.splice(vm.page.navigation.length - insertOffset, 0,\r\n                            {\r\n                                'name': value.displayName,\r\n                                'alias': value.alias,\r\n                                'icon': value.icon,\r\n                                'view': value.view\r\n                            });\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncSettingsDashboardController', dashboardController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function uSyncHub($rootScope, $q, assetsService) {\r\n\r\n        var starting = false;\r\n        var callbacks = []; \r\n\r\n        var scripts = [\r\n            Umbraco.Sys.ServerVariables.umbracoSettings.umbracoPath + '/lib/signalr/signalr.min.js']\r\n\r\n        var resource = {\r\n            initHub: initHub\r\n        };\r\n\r\n        return resource;\r\n\r\n        //////////////\r\n\r\n        function initHub(callback) {\r\n\r\n            callbacks.push(callback);\r\n\r\n            if (!starting) {\r\n                if ($.connection === undefined) {\r\n                    starting = true;\r\n\r\n                    var promises = [];\r\n                    scripts.forEach(function (script) {\r\n                        promises.push(assetsService.loadJs(script));\r\n                    });\r\n\r\n                    $q.all(promises)\r\n                        .then(function () {\r\n                            while (callbacks.length) {\r\n                                var cb = callbacks.pop();\r\n                                hubSetup(cb);\r\n                            }\r\n                            starting = false;\r\n                        });\r\n                }\r\n                else {\r\n                    while (callbacks.length) {\r\n                        var cb = callbacks.pop();\r\n                        hubSetup(cb);\r\n                    }\r\n                    starting = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        function hubSetup(callback) {\r\n\r\n            $.connection = new signalR.HubConnectionBuilder()\r\n                .withUrl(Umbraco.Sys.ServerVariables.uSync.signalRHub)\r\n                .withAutomaticReconnect()\r\n                .configureLogging(signalR.LogLevel.Warning)\r\n                .build();\r\n\r\n            var hub = {};\r\n\r\n            if ($.connection !== undefined) {\r\n                hub = {\r\n                    active: true,\r\n                    start: function (cb) {\r\n\r\n                        try {\r\n                            $.connection.start().then(function () {\r\n                                // console.info('Hub started', $.connection.connectionId);\r\n                                if (cb) {\r\n                                    cb(true);\r\n                                }\r\n                            }).catch(function () {\r\n                                console.warn('Failed to start hub');\r\n                                if (cb) {\r\n                                    cb(false);\r\n                                }\r\n                            });\r\n                        } catch (e) {\r\n                            console.warn('Could not setup signalR connection', e);\r\n                            if (cd) {\r\n                                cb(false);\r\n                            }\r\n                        }\r\n\r\n                    },\r\n                    on: function (eventName, callback) {\r\n                        $.connection.on(eventName, function (result) {\r\n                            $rootScope.$apply(function () {\r\n                                if (callback) {\r\n                                    callback(result);\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    invoke: function (methodName, callback) {\r\n                        $.connection.invoke(methodName)\r\n                            .done(function (result) {\r\n                                $rootScope.$apply(function () {\r\n                                    if (callback) {\r\n                                        callback(result);\r\n                                    }\r\n                                });\r\n                            });\r\n                    }\r\n                };\r\n            }\r\n            else {\r\n                hub = {\r\n                    on: function () { },\r\n                    invoke: function () { },\r\n                    start: function () { console.warn('no hub to start - missing signalR library ?'); }\r\n                };\r\n            }\r\n\r\n            return callback(hub);\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco.resources')\r\n        .factory('uSyncHub', uSyncHub);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var uSyncProgressViewComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSync/components/usync.progressview.html',\r\n        bindings: {\r\n            status: '<',\r\n            update: '<',\r\n            hideLabels: '<'\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: uSyncProgressViewController\r\n    };\r\n\r\n    function uSyncProgressViewController() {\r\n        var vm = this;\r\n\r\n        vm.calcPercentage = calcPercentage;\r\n\r\n        function calcPercentage(status) {\r\n            if (status !== undefined) {\r\n                return (100 * status.count) / status.total;\r\n            }\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncProgressView', uSyncProgressViewComponent);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var uSyncReportViewComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSync/components/usync.reportview.html',\r\n        bindings: {\r\n            action: '<',\r\n            results: '<',\r\n            hideAction: '<',\r\n            hideLink: '<',\r\n            showAll: '<',\r\n            hideToggle: '<',\r\n            allowSelect: '<',\r\n            selection: '='\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: uSyncReportViewController\r\n    };\r\n\r\n    function uSyncReportViewController($scope, editorService, uSync8DashboardService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.showChange = showChange;\r\n        vm.getIcon = getIcon;\r\n        vm.getChangeClass = getChangeClass;\r\n        vm.getTypeName = getTypeName;\r\n        vm.countChanges = countChanges;\r\n        vm.openDetail = openDetail;\r\n        vm.showAll = vm.showAll || false;\r\n\r\n        vm.$onInit = function () {\r\n            vm.hideLink = vm.hideLink ? true : false;\r\n            vm.hideAction = vm.hideAction ? true : false;\r\n        };\r\n\r\n\r\n        vm.apply = apply;\r\n        vm.status = status;\r\n\r\n        /////////\r\n\r\n        function showChange(change) {\r\n            return vm.showAll || (change !== 'NoChange' && change !== 'Removed');\r\n        }\r\n\r\n        function hasFailedDetail(details) {\r\n            if (details == null || details.length == 0) {\r\n                return false;\r\n            }\r\n\r\n            return details.some(function (detail) {\r\n                return !detail.success;\r\n            })\r\n        }\r\n\r\n        function getChangeClass(result) {\r\n\r\n            var classString = '';\r\n            if (vm.allowSelect) {\r\n                classString = '-usync-can-select ';\r\n            }\r\n\r\n            if (result.__selected) {\r\n                classString += '-selected '\r\n            }\r\n\r\n            if (!result.success) {\r\n                return classString + 'usync-change-row-Fail';\r\n            }\r\n            else if (hasFailedDetail(result.details)) {\r\n                return classString + ' usync-change-row-Warn';\r\n            }\r\n\r\n            return classString + ' usync-change-row-' + result.change;\r\n        }\r\n\r\n        function getIcon(result) {\r\n            if (!result.success) {\r\n                return \"icon-delete color-red\";\r\n            }\r\n            else if (hasFailedDetail(result.details)) {\r\n                return \"icon-alert color-yellow\";\r\n            }\r\n            switch (result.change) {\r\n                case 'NoChange':\r\n                    return 'icon-check color-grey';\r\n                case 'Update':\r\n                    return 'icon-check color-orange';\r\n                case 'Delete':\r\n                    return 'icon-delete color-red';\r\n                case 'Import':\r\n                    return 'icon-check color-green';\r\n                case 'Export':\r\n                    return 'icon-check color-green';\r\n                default:\r\n                    return 'icon-flag color-red';\r\n            }\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            if (typeName !== undefined) {\r\n                return typeName.substring(typeName.lastIndexOf('.') + 1);\r\n            }\r\n            return \"??\";\r\n        }\r\n\r\n        function countChanges(changes) {\r\n            var count = 0;\r\n            angular.forEach(changes, function (val, key) {\r\n                if (val.change !== 'NoChange') {\r\n                    count++;\r\n                }\r\n            });\r\n\r\n            return count;\r\n        }\r\n\r\n        function openDetail(item) {\r\n\r\n            var options = {\r\n                item: item,\r\n                title: 'uSync Change',\r\n                view: Umbraco.Sys.ServerVariables.application.applicationPath + \"App_Plugins/uSync/changedialog.html\",\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            };\r\n            editorService.open(options);\r\n        }\r\n\r\n        function apply(item) {\r\n\r\n            // do some application thing (apply just one item)\r\n            item.applyState = 'busy';\r\n            uSync8DashboardService.importItem(item)\r\n                .then(function (result) {\r\n                    item.applyState = 'success';\r\n                }, function (error) {\r\n                    console.error(error);\r\n                    item.applyState = 'error';\r\n                });\r\n        }\r\n\r\n        vm.select = select;\r\n\r\n        function select(item) {\r\n            if (vm.allowSelect && vm.selection !== undefined) {\r\n                var index = _.findIndex(vm.selection,\r\n                    (x) => (x.key == item.key && x.name == item.name)\r\n                );\r\n                if (index === -1) {\r\n                    vm.selection.push(item);\r\n                    item.__selected = true;\r\n                }\r\n                else {\r\n                    vm.selection.splice(index, 1);\r\n                    item.__selected = false; \r\n                }\r\n            }\r\n        }\r\n\r\n        function status(item) {\r\n            if (item.applyState === undefined) return 'init';\r\n            return item.applyState;\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncReportView', uSyncReportViewComponent);\r\n})();","/**\r\n * @ngdoc\r\n * @name uSync8Service\r\n * @requires $http\r\n * \r\n * @description provides the link to the uSync api elements\r\n *              required for the dashboard to function\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    function uSyncServiceController($http) {\r\n\r\n        var serviceRoot = Umbraco.Sys.ServerVariables.uSync.uSyncService;\r\n\r\n        var service = {\r\n            getSettings: getSettings,\r\n            getChangedSettings: getChangedSettings,\r\n            getHandlers: getHandlers,\r\n            getHandlerSetSettings: getHandlerSetSettings,\r\n\r\n            report: report,\r\n            exportItems: exportItems,\r\n            importItems: importItems,\r\n            importItem: importItem,\r\n            saveSettings: saveSettings,\r\n\r\n            getActionHandlers: getActionHandlers,\r\n            reportHandler: reportHandler,\r\n            importHandler: importHandler,\r\n            importPost: importPost,\r\n            exportHandler: exportHandler,\r\n            cleanExport: cleanExport,\r\n\r\n            startProcess: startProcess,\r\n            finishProcess: finishProcess,\r\n\r\n            getLoadedHandlers: getLoadedHandlers,\r\n            getAddOns: getAddOns,\r\n            getAddOnSplash: getAddOnSplash,\r\n\r\n            getHandlerGroups: getHandlerGroups,\r\n\r\n            getSyncWarnings: getSyncWarnings,\r\n\r\n            checkVersion: checkVersion\r\n\r\n        };\r\n\r\n        return service;\r\n\r\n        /////////////////////\r\n\r\n        function getSettings() {\r\n            return $http.get(serviceRoot + 'GetSettings');\r\n        }\r\n\r\n        function getChangedSettings() {\r\n            return $http.get(serviceRoot + 'GetChangedSettings');\r\n        }\r\n\r\n        function getHandlerSetSettings(set) {\r\n            return $http.get(serviceRoot + 'GetHandlerSetSettings?id=' + set);\r\n        }\r\n\r\n        function getHandlers() {\r\n            return $http.get(serviceRoot + 'GetHandlers');\r\n        }\r\n\r\n        function getLoadedHandlers() {\r\n            return $http.get(serviceRoot + 'GetLoadedHandlers');\r\n        }\r\n\r\n        function getAddOns() {\r\n            return $http.get(serviceRoot + 'GetAddOns');\r\n        }\r\n\r\n        function getAddOnSplash() {\r\n            return $http.get(serviceRoot + 'GetAddOnSplash');\r\n        }\r\n\r\n\r\n        function report(group, clientId) {\r\n            return $http.post(serviceRoot + 'report', { clientId: clientId, group: group });\r\n        }\r\n\r\n        function exportItems (clientId, clean) {\r\n            return $http.post(serviceRoot + 'export', { clientId: clientId, clean: clean });\r\n        }\r\n\r\n        function importItems(force, group, clientId) {\r\n            return $http.put(serviceRoot + 'import',\r\n                {\r\n                    force: force,\r\n                    group: group,\r\n                    clientId: clientId\r\n                });\r\n        }\r\n\r\n        function getSyncWarnings(action, group) {\r\n            return $http.post(serviceRoot + 'GetSyncWarnings?action=' + action, { group: group });\r\n        }\r\n        \r\n\r\n        function importItem(item) {\r\n            return $http.put(serviceRoot + 'importItem', item);\r\n        }\r\n\r\n        function saveSettings(settings) {\r\n            return $http.post(serviceRoot + 'savesettings', settings);\r\n        }\r\n\r\n        function getHandlerGroups() {\r\n            return $http.get(serviceRoot + 'GetHandlerGroups');\r\n        }\r\n\r\n        function checkVersion() {\r\n            return $http.get(serviceRoot + 'CheckVersion');\r\n        }\r\n\r\n\r\n        function getActionHandlers(options) {\r\n            return $http.post(serviceRoot + 'GetActionHandlers?action=' + options.action,\r\n                {\r\n                    group: options.group\r\n                });\r\n        }\r\n\r\n        function reportHandler(handler, options, clientId) {\r\n            return $http.post(serviceRoot + 'ReportHandler', {\r\n                handler: handler,\r\n                clientId: clientId\r\n            });\r\n        }\r\n\r\n        function importHandler(handler, options, clientId) {\r\n            return $http.post(serviceRoot + 'ImportHandler', {\r\n                handler: handler,\r\n                clientId: clientId,\r\n                force: options.force\r\n            });\r\n        }\r\n\r\n        function importPost(actions, options, clientId) {\r\n            return $http.post(serviceRoot + 'ImportPost', {\r\n                actions: actions,\r\n                clientId: clientId\r\n            });\r\n        }\r\n\r\n        function exportHandler(handler, options, clientId) {\r\n            return $http.post(serviceRoot + 'ExportHandler', {\r\n                handler: handler,\r\n                clientId: clientId\r\n            });\r\n        }\r\n\r\n        function startProcess(action) {\r\n            return $http.post(serviceRoot + 'StartProcess?action=' + action);\r\n        }\r\n\r\n        function finishProcess(action, actions) {\r\n            return $http.post(serviceRoot + 'FinishProcess?action=' + action, actions);\r\n        }\r\n\r\n        function cleanExport() {\r\n            return $http.post(serviceRoot + 'cleanExport');\r\n        }\r\n    \r\n    }\r\n\r\n    angular.module('umbraco.services')\r\n        .factory('uSync8DashboardService', uSyncServiceController);\r\n\r\n})();"]}