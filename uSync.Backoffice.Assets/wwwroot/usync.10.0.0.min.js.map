{"version":3,"sources":["../../changedialog.controller.js","../../usync.hub.js","../../usync.service.js","../../components/usync.progressview.component.js","../../components/usync.reportview.component.js","../../settings/expansion.controller.js","../../settings/settings.controller.js","../../settings/usync.controller.js","../../backoffice/usync/usync.dashboard.controller.js"],"names":["angular","module","controller","$scope","assetsService","vm","this","getTypeName","typeName","substring","lastIndexOf","item","model","loadJs","then","details","forEach","detail","index","oldValueDiff","oldValue","newValueDiff","newValue","oldValueJson","Object","JSON","stringify","newValueJson","diff","Diff","diffWords","close","pageTitle","change","itemType","name","factory","$rootScope","$q","starting","callbacks","scripts","Umbraco","Sys","ServerVariables","umbracoSettings","umbracoPath","initHub","callback","push","undefined","$","connection","promises","script","all","length","hubSetup","pop","signalR","HubConnectionBuilder","withUrl","uSync","signalRHub","withAutomaticReconnect","configureLogging","LogLevel","Warning","build","hub","active","start","cb","catch","console","warn","e","cd","on","eventName","result","$apply","invoke","methodName","done","$http","serviceRoot","uSyncService","getSettings","get","getChangedSettings","getHandlers","set","getHandlerSetSettings","getDefaultSet","getSets","getSelectableSets","report","group","clientId","post","exportItems","clean","importItems","force","put","importItem","saveSettings","settings","getActionHandlers","options","action","reportHandler","handler","importHandler","importPost","actions","exportHandler","cleanExport","startProcess","finishProcess","getLoadedHandlers","getAddOns","getAddOnSplash","getHandlerGroups","getSyncWarnings","checkVersion","uSyncProgressViewComponent","templateUrl","application","applicationPath","bindings","status","update","hideLabels","controllerAs","calcPercentage","count","total","component","uSyncReportViewComponent","results","hideAction","hideLink","showAll","hideToggle","allowSelect","selection","editorService","overlayService","uSync8DashboardService","hasFailedDetail","some","success","showChange","getIcon","getChangeClass","classString","exception","__selected","countChanges","changes","val","key","openDetail","title","view","open","$onInit","apply","applyState","error","select","_","findIndex","x","splice","appPluginsPath","size","disableBackdropClick","disableEscKey","disableSubmitButton","closeButtonLabelKey","loading","addons","data","notificationsService","working","readonly","docslink","umbracoVersion","version","Message","openAppSettingsOverlay","appSetting","toPascal","o","newO","origKey","newKey","value","Array","map","toCamel","hasOwnProperty","charAt","toUpperCase","slice","toString","constructor","content","hideSubmitButton","submit","confirm","setname","defaultSet","handlerSet","sets","$controller","eventsService","localizationService","uSyncHub","fresh","versionLoaded","reported","syncing","showSpinner","showEverything","groups","perf","showAdvanced","hasuSyncForms","canHaveForms","modes","NONE","REPORT","IMPORT","EXPORT","initSet","currentSet","isSingle","keys","icon","groupInfo","toLowerCase","state","import","defaultButton","labelKey","importGroup","subButtons","importForce","export","exportGroup","everything","handlers","performAction","actionMethod","resolve","reject","message","runHandlerAction","alias","getClientId","concat","performHandlerAction","resetStatus","getWarnings","performance","now","emit","time","duration","moment","savings","show","humanize","godo","calculateTimeSaved","ExceptionMessage","exceptionMessage","localizeMany","values","submitButtonLabel","closeButtonLabel","warnings","mode","runmode","connectionId","reportAction","versionInfo","IsCurrent","umbType","indexOf","Total","changeSet","n","loadSavingsMessages","exportButtons","$timeout","navigationService","selectNavigationItem","page","description","navigation","syncTree","tree","path","addOnString","addOns","insertOffset","displayName"],"mappings":"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","file":"usync.10.0.0.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    function changeDialogController($scope, assetsService) {\r\n\r\n        var vm = this;\r\n        vm.item = $scope.model.item;\r\n\r\n        var jsdiff = 'lib/jsdiff/diff.js';\r\n\r\n        assetsService.loadJs(jsdiff, $scope).then(function () {\r\n            calcDiffs();\r\n        });\r\n\r\n        vm.close = close;\r\n        vm.getTypeName = getTypeName;\r\n        vm.pageTitle = pageTitle;\r\n\r\n        function close() {\r\n            if ($scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            return typeName.substring(typeName.lastIndexOf('.') + 1);\r\n        }\r\n\r\n        function pageTitle() {\r\n            return vm.item.change + ' ' + getTypeName(vm.item.itemType) + ' ' + vm.item.name;\r\n        }\r\n\r\n        function calcDiffs() {\r\n\r\n            vm.item.details.forEach(function (detail, index) {\r\n\r\n\r\n                let oldValueDiff = detail.oldValue === null ? \"\" : detail.oldValue;\r\n                let newValueDiff = detail.newValue === null ? \"\" : detail.newValue;\r\n\r\n                if (detail.oldValueJson instanceof Object) {\r\n                    oldValueDiff = JSON.stringify(detail.oldValue, null, 1);\r\n                }\r\n\r\n                if (detail.newValueJson instanceof Object) {\r\n                    newValueDiff = JSON.stringify(detail.newValue, null, 1);\r\n                }\r\n\r\n                detail.diff = Diff.diffWords(oldValueDiff, newValueDiff );\r\n            });\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncChangeDialogController', changeDialogController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function uSyncHub($rootScope, $q, assetsService) {\r\n\r\n        var starting = false;\r\n        var callbacks = []; \r\n\r\n        var scripts = [\r\n            Umbraco.Sys.ServerVariables.umbracoSettings.umbracoPath + '/lib/signalr/signalr.min.js']\r\n\r\n        var resource = {\r\n            initHub: initHub\r\n        };\r\n\r\n        return resource;\r\n\r\n        //////////////\r\n\r\n        function initHub(callback) {\r\n\r\n            callbacks.push(callback);\r\n\r\n            if (!starting) {\r\n                if ($.connection === undefined) {\r\n                    starting = true;\r\n\r\n                    var promises = [];\r\n                    scripts.forEach(function (script) {\r\n                        promises.push(assetsService.loadJs(script));\r\n                    });\r\n\r\n                    $q.all(promises)\r\n                        .then(function () {\r\n                            while (callbacks.length) {\r\n                                var cb = callbacks.pop();\r\n                                hubSetup(cb);\r\n                            }\r\n                            starting = false;\r\n                        });\r\n                }\r\n                else {\r\n                    while (callbacks.length) {\r\n                        var cb = callbacks.pop();\r\n                        hubSetup(cb);\r\n                    }\r\n                    starting = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        function hubSetup(callback) {\r\n\r\n            $.connection = new signalR.HubConnectionBuilder()\r\n                .withUrl(Umbraco.Sys.ServerVariables.uSync.signalRHub)\r\n                .withAutomaticReconnect()\r\n                .configureLogging(signalR.LogLevel.Warning)\r\n                .build();\r\n\r\n            var hub = {};\r\n\r\n            if ($.connection !== undefined) {\r\n                hub = {\r\n                    active: true,\r\n                    start: function (cb) {\r\n\r\n                        try {\r\n                            $.connection.start().then(function () {\r\n                                // console.info('Hub started', $.connection.connectionId);\r\n                                if (cb) {\r\n                                    cb(true);\r\n                                }\r\n                            }).catch(function () {\r\n                                console.warn('Failed to start hub');\r\n                                if (cb) {\r\n                                    cb(false);\r\n                                }\r\n                            });\r\n                        } catch (e) {\r\n                            console.warn('Could not setup signalR connection', e);\r\n                            if (cd) {\r\n                                cb(false);\r\n                            }\r\n                        }\r\n\r\n                    },\r\n                    on: function (eventName, callback) {\r\n                        $.connection.on(eventName, function (result) {\r\n                            $rootScope.$apply(function () {\r\n                                if (callback) {\r\n                                    callback(result);\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    invoke: function (methodName, callback) {\r\n                        $.connection.invoke(methodName)\r\n                            .done(function (result) {\r\n                                $rootScope.$apply(function () {\r\n                                    if (callback) {\r\n                                        callback(result);\r\n                                    }\r\n                                });\r\n                            });\r\n                    }\r\n                };\r\n            }\r\n            else {\r\n                hub = {\r\n                    on: function () { },\r\n                    invoke: function () { },\r\n                    start: function () { console.warn('no hub to start - missing signalR library ?'); }\r\n                };\r\n            }\r\n\r\n            return callback(hub);\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco.resources')\r\n        .factory('uSyncHub', uSyncHub);\r\n})();","/**\r\n * @ngdoc\r\n * @name uSync8Service\r\n * @requires $http\r\n * \r\n * @description provides the link to the uSync api elements\r\n *              required for the dashboard to function\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    function uSyncServiceController($http) {\r\n\r\n        var serviceRoot = Umbraco.Sys.ServerVariables.uSync.uSyncService;\r\n\r\n        var service = {\r\n            getSettings: getSettings,\r\n            getChangedSettings: getChangedSettings,\r\n            getHandlers: getHandlers,\r\n            getHandlerSetSettings: getHandlerSetSettings,\r\n\r\n            getDefaultSet: getDefaultSet,\r\n            getSets: getSets,\r\n            getSelectableSets: getSelectableSets,\r\n\r\n            report: report,\r\n            exportItems: exportItems,\r\n            importItems: importItems,\r\n            importItem: importItem,\r\n            saveSettings: saveSettings,\r\n\r\n            getActionHandlers: getActionHandlers,\r\n            reportHandler: reportHandler,\r\n            importHandler: importHandler,\r\n            importPost: importPost,\r\n            exportHandler: exportHandler,\r\n            cleanExport: cleanExport,\r\n\r\n            startProcess: startProcess,\r\n            finishProcess: finishProcess,\r\n\r\n            getLoadedHandlers: getLoadedHandlers,\r\n            getAddOns: getAddOns,\r\n            getAddOnSplash: getAddOnSplash,\r\n\r\n            getHandlerGroups: getHandlerGroups,\r\n\r\n            getSyncWarnings: getSyncWarnings,\r\n\r\n            checkVersion: checkVersion\r\n\r\n        };\r\n\r\n        return service;\r\n\r\n        /////////////////////\r\n\r\n        function getSettings() {\r\n            return $http.get(serviceRoot + 'GetSettings');\r\n        }\r\n\r\n        function getDefaultSet() {\r\n            return $http.get(serviceRoot + 'GetDefaultSet');\r\n        }\r\n\r\n        function getSets() {\r\n            return $http.get(serviceRoot + 'GetSets');\r\n        }\r\n\r\n        function getSelectableSets() {\r\n            return $http.get(serviceRoot + 'GetSelectableSets');\r\n        }\r\n\r\n        function getChangedSettings() {\r\n            return $http.get(serviceRoot + 'GetChangedSettings');\r\n        }\r\n\r\n        function getHandlerSetSettings(set) {\r\n            return $http.get(serviceRoot + 'GetHandlerSetSettings?id=' + set);\r\n        }\r\n\r\n        function getHandlers(set) {\r\n            return $http.get(serviceRoot + 'GetHandlers?set=' + set);\r\n        }\r\n\r\n        function getLoadedHandlers() {\r\n            return $http.get(serviceRoot + 'GetLoadedHandlers');\r\n        }\r\n\r\n        function getAddOns() {\r\n            return $http.get(serviceRoot + 'GetAddOns');\r\n        }\r\n\r\n        function getAddOnSplash() {\r\n            return $http.get(serviceRoot + 'GetAddOnSplash');\r\n        }\r\n\r\n\r\n        function report(group, clientId) {\r\n            return $http.post(serviceRoot + 'report', { clientId: clientId, group: group });\r\n        }\r\n\r\n        function exportItems (clientId, clean) {\r\n            return $http.post(serviceRoot + 'export', { clientId: clientId, clean: clean });\r\n        }\r\n\r\n        function importItems(force, set, group, clientId) {\r\n            return $http.put(serviceRoot + 'import',\r\n                {\r\n                    force: force,\r\n                    set: set,\r\n                    group: group,\r\n                    clientId: clientId,\r\n                });\r\n        }\r\n\r\n        function getSyncWarnings(action, group) {\r\n            return $http.post(serviceRoot + 'GetSyncWarnings?action=' + action, {\r\n                group: group\r\n            });\r\n        }\r\n        \r\n\r\n        function importItem(item) {\r\n            return $http.put(serviceRoot + 'importItem', item);\r\n        }\r\n\r\n        function saveSettings(settings) {\r\n            return $http.post(serviceRoot + 'savesettings', settings);\r\n        }\r\n\r\n        function getHandlerGroups(set) {\r\n            return $http.get(serviceRoot + 'GetHandlerGroups?set=' + set);\r\n        }\r\n\r\n        function checkVersion() {\r\n            return $http.get(serviceRoot + 'CheckVersion');\r\n        }\r\n\r\n\r\n        function getActionHandlers(options) {\r\n            return $http.post(serviceRoot + 'GetActionHandlers?action=' + options.action,\r\n                {\r\n                    group: options.group,\r\n                    set: options.set\r\n                });\r\n        }\r\n\r\n        function reportHandler(handler, options, clientId) {\r\n            return $http.post(serviceRoot + 'ReportHandler', {\r\n                handler: handler,\r\n                clientId: clientId\r\n            });\r\n        }\r\n\r\n        function importHandler(handler, options, clientId) {\r\n            return $http.post(serviceRoot + 'ImportHandler', {\r\n                handler: handler,\r\n                clientId: clientId,\r\n                force: options.force,\r\n                set: options.set\r\n            });\r\n        }\r\n\r\n        function importPost(actions, options, clientId) {\r\n            return $http.post(serviceRoot + 'ImportPost', {\r\n                actions: actions,\r\n                clientId: clientId,\r\n                set: options.set\r\n            });\r\n        }\r\n\r\n        function exportHandler(handler, options, clientId) {\r\n            return $http.post(serviceRoot + 'ExportHandler', {\r\n                handler: handler,\r\n                clientId: clientId,\r\n                set: options.set\r\n            });\r\n        }\r\n\r\n        function startProcess(action) {\r\n            return $http.post(serviceRoot + 'StartProcess?action=' + action);\r\n        }\r\n\r\n        function finishProcess(action, actions) {\r\n            return $http.post(serviceRoot + 'FinishProcess?action=' + action, actions);\r\n        }\r\n\r\n        function cleanExport() {\r\n            return $http.post(serviceRoot + 'cleanExport');\r\n        }\r\n    \r\n    }\r\n\r\n    angular.module('umbraco.services')\r\n        .factory('uSync8DashboardService', uSyncServiceController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var uSyncProgressViewComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSync/components/usync.progressview.html',\r\n        bindings: {\r\n            status: '<',\r\n            update: '<',\r\n            hideLabels: '<'\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: uSyncProgressViewController\r\n    };\r\n\r\n    function uSyncProgressViewController() {\r\n        var vm = this;\r\n\r\n        vm.calcPercentage = calcPercentage;\r\n\r\n        function calcPercentage(status) {\r\n            if (status !== undefined && status.count !== undefined) {\r\n                return (100 * status.count) / status.total;\r\n            }\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncProgressView', uSyncProgressViewComponent);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var uSyncReportViewComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSync/components/usync.reportview.html',\r\n        bindings: {\r\n            action: '<',\r\n            results: '<',\r\n            hideAction: '<',\r\n            hideLink: '<',\r\n            showAll: '<',\r\n            hideToggle: '<',\r\n            allowSelect: '<',\r\n            selection: '='\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: uSyncReportViewController\r\n    };\r\n\r\n    function uSyncReportViewController($scope, editorService,\r\n        overlayService, uSync8DashboardService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.showChange = showChange;\r\n        vm.getIcon = getIcon;\r\n        vm.getChangeClass = getChangeClass;\r\n        vm.getTypeName = getTypeName;\r\n        vm.countChanges = countChanges;\r\n        vm.openDetail = openDetail;\r\n        vm.showAll = vm.showAll || false;\r\n\r\n        vm.$onInit = function () {\r\n            vm.hideLink = vm.hideLink ? true : false;\r\n            vm.hideAction = vm.hideAction ? true : false;\r\n        };\r\n\r\n\r\n        vm.apply = apply;\r\n        vm.status = status;\r\n\r\n        /////////\r\n\r\n        function showChange(change) {\r\n            return vm.showAll || (change !== 'NoChange' && change !== 'Removed');\r\n        }\r\n\r\n        function hasFailedDetail(details) {\r\n            if (details == null || details.length == 0) {\r\n                return false;\r\n            }\r\n\r\n            return details.some(function (detail) {\r\n                return !detail.success;\r\n            })\r\n        }\r\n\r\n        function getChangeClass(result) {\r\n\r\n            var classString = '';\r\n            if (vm.allowSelect || result.exception != null) {\r\n                classString = '-usync-can-select ';\r\n            }\r\n\r\n            if (result.__selected) {\r\n                classString += '-selected '\r\n            }\r\n\r\n            if (!result.success) {\r\n                return classString + 'usync-change-row-Fail';\r\n            }\r\n            else if (hasFailedDetail(result.details)) {\r\n                return classString + ' usync-change-row-Warn';\r\n            }\r\n\r\n            return classString + ' usync-change-row-' + result.change;\r\n        }\r\n\r\n        function getIcon(result) {\r\n            if (!result.success) {\r\n                return \"icon-delete color-red\";\r\n            }\r\n            else if (hasFailedDetail(result.details)) {\r\n                return \"icon-alert color-yellow\";\r\n            }\r\n            switch (result.change) {\r\n                case 'NoChange':\r\n                    return 'icon-check color-grey';\r\n                case 'Update':\r\n                    return 'icon-check color-orange';\r\n                case 'Delete':\r\n                    return 'icon-delete color-red';\r\n                case 'Import':\r\n                    return 'icon-check color-green';\r\n                case 'Export':\r\n                    return 'icon-check color-green';\r\n                default:\r\n                    return 'icon-flag color-red';\r\n            }\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            if (typeName !== undefined) {\r\n                return typeName.substring(typeName.lastIndexOf('.') + 1);\r\n            }\r\n            return \"??\";\r\n        }\r\n\r\n        function countChanges(changes) {\r\n            var count = 0;\r\n            angular.forEach(changes, function (val, key) {\r\n                if (val.change !== 'NoChange') {\r\n                    count++;\r\n                }\r\n            });\r\n\r\n            return count;\r\n        }\r\n\r\n        function openDetail(item) {\r\n\r\n            var options = {\r\n                item: item,\r\n                title: 'uSync Change',\r\n                view: Umbraco.Sys.ServerVariables.application.applicationPath + \"App_Plugins/uSync/changedialog.html\",\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            };\r\n            editorService.open(options);\r\n        }\r\n\r\n        function apply(item) {\r\n\r\n            // do some application thing (apply just one item)\r\n            item.applyState = 'busy';\r\n            uSync8DashboardService.importItem(item)\r\n                .then(function (result) {\r\n                    item.applyState = 'success';\r\n                }, function (error) {\r\n                    console.error(error);\r\n                    item.applyState = 'error';\r\n                });\r\n        }\r\n\r\n        vm.select = select;\r\n\r\n        function select(item) {\r\n            if (vm.allowSelect && vm.selection !== undefined) {\r\n                var index = _.findIndex(vm.selection,\r\n                    (x) => (x.key == item.key && x.name == item.name)\r\n                );\r\n                if (index === -1) {\r\n                    vm.selection.push(item);\r\n                    item.__selected = true;\r\n                }\r\n                else {\r\n                    vm.selection.splice(index, 1);\r\n                    item.__selected = false; \r\n                }\r\n            }\r\n\r\n            if (item.exception != null) {\r\n\r\n                overlayService.open({\r\n                    view: Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/itemdialog.html',\r\n                    title: item.name,\r\n                    item: item,\r\n                    exception: item.exception,\r\n                    size: 'usync-error',\r\n                    disableBackdropClick: true,\r\n                    disableEscKey: true,\r\n                    disableSubmitButton: true,\r\n                    closeButtonLabelKey: 'general_close',\r\n                    close: function () {\r\n                        overlayService.close();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function status(item) {\r\n            if (item.applyState === undefined) return 'init';\r\n            return item.applyState;\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncReportView', uSyncReportViewComponent);\r\n})();","(function () {\r\n\r\n    'use strict';\r\n\r\n    function expansionController($scope, uSync8DashboardService) {\r\n\r\n        var vm = this;\r\n        vm.loading = true;\r\n        ///\r\n\r\n        uSync8DashboardService.getAddOnSplash()\r\n            .then(function (result) {\r\n                vm.addons = result.data;\r\n                vm.loading = false;\r\n            });\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncExpansionController', expansionController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function settingsController($scope,\r\n        uSync8DashboardService,\r\n        overlayService,\r\n        notificationsService) {\r\n\r\n        var vm = this;\r\n        vm.working = false;\r\n        vm.loading = true;\r\n        vm.readonly = true;\r\n\r\n        vm.docslink = \"https://docs.jumoo.co.uk/uSync/v9/settings/\";\r\n\r\n        vm.umbracoVersion = Umbraco.Sys.ServerVariables.application.version;\r\n\r\n        vm.saveSettings = saveSettings;\r\n        vm.openAppSettingsOverlay = openAppSettingsOverlay;\r\n\r\n        init();\r\n\r\n        ///////////\r\n\r\n        function init() {\r\n            getSettings();\r\n            getSets();\r\n        }\r\n\r\n        ///////////\r\n        function getSettings() {\r\n\r\n            uSync8DashboardService.getSettings()\r\n                .then(function (result) {\r\n                    vm.settings = result.data;\r\n                    vm.loading = false;\r\n                    getHandlerSetSettings(vm.settings.defaultSet);\r\n                });\r\n        }\r\n\r\n        function getHandlerSetSettings(setname) {\r\n\r\n            uSync8DashboardService.getHandlerSetSettings(setname)\r\n                .then(function (result) {\r\n                    vm.handlerSet = result.data;\r\n                });\r\n\r\n        }\r\n\r\n        function getSets() {\r\n            uSync8DashboardService.getSets()\r\n                .then(function (result) {\r\n                    vm.sets = result.data;\r\n                    // console.log(result.data);\r\n                })\r\n        }\r\n\r\n        function saveSettings() {\r\n            vm.working = false;\r\n            uSync8DashboardService.saveSettings(vm.settings)\r\n                .then(function (result) {\r\n                    vm.working = false;\r\n                    notificationsService.success('Saved', 'Settings updated');\r\n                }, function (error) {\r\n                    notificationsService.error('Saving', error.data.Message);\r\n                });\r\n        }\r\n\r\n\r\n\r\n        function openAppSettingsOverlay() {\r\n\r\n            uSync8DashboardService.getChangedSettings()\r\n                .then(function (result) {\r\n                    var appSetting = {\r\n                        \"uSync\": toPascal(result.data)\r\n                    }\r\n\r\n                    var options = {\r\n                        view: Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/settings.overlay.html',\r\n                        title: 'appsettings.json snipped',\r\n                        content: JSON.stringify(appSetting, null, 4),\r\n                        docslink: vm.docslink,\r\n                        disableBackdropClick: true,\r\n                        disableEscKey: true,\r\n                        hideSubmitButton: true,\r\n                        submit: function () {\r\n                            overlayService.close();\r\n                        }\r\n                    };\r\n\r\n                    overlayService.confirm(options);\r\n                });\r\n\r\n        }\r\n\r\n\r\n        function toPascal(o) {\r\n            var newO, origKey, newKey, value\r\n            if (o instanceof Array) {\r\n                return o.map(function (value) {\r\n                    if (typeof value === \"object\") {\r\n                        value = toCamel(value)\r\n                    }\r\n                    return value\r\n                })\r\n            } else {\r\n                newO = {}\r\n                for (origKey in o) {\r\n                    if (o.hasOwnProperty(origKey)) {\r\n                        newKey = (origKey.charAt(0).toUpperCase() + origKey.slice(1) || origKey).toString()\r\n                        value = o[origKey]\r\n                        if (value instanceof Array || (value !== null && value.constructor === Object)) {\r\n                            value = toPascal(value)\r\n                        }\r\n                        newO[newKey] = value\r\n                    }\r\n                }\r\n            }\r\n            return newO\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncSettingsController', settingsController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function uSyncController($scope, $q, $controller,\r\n        eventsService,\r\n        overlayService,\r\n        notificationsService,\r\n        localizationService,\r\n        editorService,\r\n        uSync8DashboardService,\r\n        uSyncHub) {\r\n\r\n        var vm = this;\r\n        vm.fresh = true;\r\n        vm.loading = true;\r\n        vm.versionLoaded = false;\r\n        vm.working = false;\r\n        vm.reported = false;\r\n        vm.syncing = false;\r\n        vm.hideLink = false;\r\n        vm.showSpinner = false;\r\n        vm.showEverything = true;\r\n\r\n        vm.selection = [];\r\n\r\n        vm.groups = [];\r\n        vm.perf = 0;\r\n\r\n        vm.showAdvanced = false;\r\n\r\n        vm.hasuSyncForms = false;\r\n\r\n        vm.canHaveForms = false;\r\n\r\n        var modes = {\r\n            NONE: 0,\r\n            REPORT: 1,\r\n            IMPORT: 2,\r\n            EXPORT: 3\r\n        };\r\n\r\n        vm.runmode = modes.NONE;\r\n\r\n        vm.showAll = false;\r\n        vm.status = {};\r\n        vm.reportAction = '';\r\n\r\n        vm.everything = {\r\n            icon: 'icon-paper-plane-alt color-deep-orange',\r\n            name: 'Everything',\r\n            group: '',\r\n            state: 'init',\r\n            key: 'everything'\r\n        }\r\n\r\n        vm.everything.import = {\r\n            state: 'init',\r\n            defaultButton: {\r\n                labelKey: 'usync_import',\r\n                handler: function () { importItems(false, vm.everything); }\r\n            },\r\n            subButtons: [{\r\n                labelKey: 'usync_importforce',\r\n                handler: function () { importForce(vm.everything); }\r\n            }]\r\n        };\r\n\r\n        vm.everything.export = {\r\n            state: 'init',\r\n            defaultButton: {\r\n                labelKey: 'usync_export',\r\n                handler: function () { exportGroup(vm.everything); }\r\n            },\r\n            subButtons: [{\r\n                labelKey: 'usync_exportClean',\r\n                handler: function () { cleanExport(); }\r\n            }]\r\n        }\r\n\r\n        vm.report = report;\r\n        vm.versionInfo = {\r\n            IsCurrent: true\r\n        };\r\n\r\n        vm.importForce = importForce;\r\n        vm.importItems = importItems;\r\n        vm.importGroup = importGroup;\r\n        vm.exportGroup = exportGroup;\r\n\r\n        vm.getTypeName = getTypeName;\r\n\r\n        vm.showChange = showChange;\r\n        vm.countChanges = countChanges;\r\n        vm.calcPercentage = calcPercentage;\r\n        vm.openDetail = openDetail;\r\n\r\n        vm.changeSet = changeSet; \r\n        \r\n        init();\r\n\r\n        function init() {\r\n            InitHub();\r\n            loadSavingsMessages();\r\n\r\n            uSync8DashboardService.getDefaultSet()\r\n                .then(function (result) {\r\n                    vm.currentSet = result.data;\r\n                    initSet(vm.currentSet);\r\n                });\r\n\r\n            uSync8DashboardService.getSelectableSets()\r\n                .then(function (result) {\r\n                    vm.sets = result.data;\r\n                });\r\n\r\n            uSync8DashboardService.checkVersion()\r\n                .then(function (result) {\r\n                    vm.versionLoaded = true;\r\n                    vm.versionInfo = result.data;\r\n                });\r\n\r\n        }\r\n\r\n        function initSet(setname) {\r\n\r\n            vm.loading = true;\r\n\r\n            getHandlerGroups();\r\n\r\n            // just so there is something there when you start\r\n            uSync8DashboardService.getHandlers(setname)\r\n                .then(function (result) {\r\n                    vm.handlers = result.data;\r\n                    vm.status.handlers = vm.handlers;\r\n                    vm.loading = false; \r\n                });\r\n        }\r\n\r\n\r\n        function performAction(options, actionMethod, cb) {\r\n\r\n            return $q(function (resolve, reject) {\r\n                uSync8DashboardService.getActionHandlers(options)\r\n                    .then(function (result) {\r\n                        vm.status.handlers = result.data;\r\n                        performHandlerAction(vm.status.handlers, actionMethod, options, cb)\r\n                            .then(function () {\r\n                                resolve();\r\n                            }, function (error) {\r\n                                reject(error)\r\n                            })\r\n                    });\r\n            });\r\n        }\r\n\r\n        function performHandlerAction(handlers, actionMethod, options, cb) {\r\n\r\n\r\n            return $q(function (resolve, reject) {\r\n\r\n                var index = 0;\r\n                vm.status.message = 'Starting ' + options.action;\r\n                vm.status.total = handlers.length - 1;\r\n\r\n                uSync8DashboardService.startProcess(options.action)\r\n                    .then(function () {\r\n                        runHandlerAction(handlers[index])\r\n                    });\r\n\r\n                function runHandlerAction(handler) {\r\n\r\n                    vm.status.message = handler.name;\r\n\r\n                    handler.status = 1;\r\n                    actionMethod(handler.alias, options, getClientId())\r\n                        .then(function (result) {\r\n\r\n                            vm.results = vm.results.concat(result.data.actions);\r\n\r\n                            handler.status = 2;\r\n                            handler.changes = countChanges(result.data.actions);\r\n\r\n                            index++;\r\n                            vm.status.count = index;\r\n\r\n                            if (index < handlers.length) {\r\n                                runHandlerAction(handlers[index]);\r\n                            }\r\n                            else {\r\n\r\n                                vm.status.message = 'Finishing ' + options.action;\r\n\r\n                                uSync8DashboardService.finishProcess(options.action, vm.results)\r\n                                    .then(function () {\r\n                                        resolve();\r\n                                    });\r\n                            }\r\n                        }, function (error) {\r\n                            // error in this handler ? \r\n                            // do we want to carry on with the other ones or just stop?\r\n                            reject(error);\r\n                        });\r\n                }\r\n            });\r\n        }\r\n\r\n        function report(group) {\r\n\r\n            if (vm.working === true) return;\r\n\r\n            vm.results = [];\r\n\r\n            resetStatus(modes.REPORT);\r\n            getWarnings('report');\r\n            group.state = 'busy';\r\n\r\n            var options = {\r\n                action: 'report',\r\n                group: group.group,\r\n                set: vm.currentSet\r\n            };\r\n\r\n            var start = performance.now();\r\n\r\n            performAction(options, uSync8DashboardService.reportHandler)\r\n                .then(function (results) {\r\n                    vm.working = false;\r\n                    vm.reported = true;\r\n                    vm.perf = performance.now() - start;\r\n                    vm.status.message = 'Report complete';\r\n                    group.state = 'success';\r\n                }, function (error) {\r\n                    vm.working = false;\r\n                    group.state = 'error';\r\n                    notificationsService.error('Error', error.data.ExceptionMessage ?? error.data.exceptionMessage);\r\n                });\r\n        }\r\n\r\n        function importForce(group) {\r\n            importItems(true, group);\r\n        }\r\n\r\n        function importItems(force, group) {\r\n\r\n            if (vm.working === true) return;\r\n\r\n            vm.results = [];\r\n            resetStatus(modes.IMPORT);\r\n            getWarnings('import');\r\n\r\n            group.state = 'busy';\r\n\r\n            var options = {\r\n                action: 'import',\r\n                group: group.group,\r\n                force: force,\r\n                set: vm.currentSet\r\n            };\r\n\r\n            var start = performance.now();\r\n\r\n            performAction(options, uSync8DashboardService.importHandler)\r\n                .then(function (results) {\r\n\r\n                    vm.status.message = 'Post import actions';\r\n\r\n                    uSync8DashboardService.importPost(vm.results, options, getClientId())\r\n                        .then(function (results) {\r\n                            vm.working = false;\r\n                            vm.reported = true;\r\n                            vm.perf = performance.now() - start;\r\n                            group.state = 'success';\r\n                            eventsService.emit('usync-dashboard.import.complete');\r\n                            calculateTimeSaved(vm.results);\r\n                            vm.status.message = 'Complete';\r\n                        });\r\n                }, function (error) {\r\n                    vm.working = false;\r\n                    vm.group.state = 'error';\r\n                    notificationsService.error('Error', error.data.ExceptionMessage ?? error.data.exceptionMessage);\r\n                });\r\n        }\r\n\r\n        function exportGroup(group) {\r\n\r\n            if (vm.working === true) return;\r\n\r\n            vm.results = [];\r\n            resetStatus(modes.EXPORT);\r\n            group.state = 'busy';\r\n\r\n            var options = {\r\n                action: 'export',\r\n                group: group.group,\r\n                set: vm.currentSet\r\n            };\r\n\r\n            var start = performance.now();\r\n\r\n            performAction(options, uSync8DashboardService.exportHandler)\r\n                .then(function (results) {\r\n                    vm.status.message = 'Export complete';\r\n                    vm.working = false;\r\n                    vm.reported = true;\r\n                    vm.perf = performance.now() - start;\r\n\r\n                    group.state = 'success';\r\n                    vm.savings.show = true;\r\n                    vm.savings.title = 'All items exported.';\r\n                    vm.savings.message = 'Now go wash your hands 🧼!';\r\n                    eventsService.emit('usync-dashboard.export.complete');\r\n                }, function (error) {\r\n                    vm.working = false;\r\n                    group.state = 'error';\r\n                    notificationsService.error('Error', error.data.ExceptionMessage ?? error.data.exceptionMessage);\r\n                });\r\n        }\r\n\r\n        function cleanExport() {\r\n\r\n            localizationService.localizeMany([\"usync_cleanTitle\",\r\n                \"usync_cleanMsg\", \"usync_cleanSubmit\", \"usync_cleanClose\"])\r\n                .then(function (values) {\r\n\r\n\r\n                    overlayService.open({\r\n                        title: values[0],\r\n                        content: values[1],\r\n                        disableBackdropClick: true,\r\n                        disableEscKey: true,\r\n                        submitButtonLabel: values[2],\r\n                        closeButtonLabel: values[3],\r\n                        submit: function () {\r\n                            overlayService.close();\r\n\r\n                            uSync8DashboardService.cleanExport()\r\n                                .then(function () {\r\n                                    exportGroup(vm.everything);\r\n                                });\r\n                        },\r\n                        close: function () {\r\n                            overlayService.close();\r\n                        }\r\n                    });\r\n                });\r\n        }\r\n\r\n        // add a little joy to the process.\r\n        function calculateTimeSaved(results) {\r\n            var changes = countChanges(results);\r\n            var time = changes * 26.5;\r\n\r\n            var duration = moment.duration(time, 'seconds');\r\n\r\n            if (time >= 180) {\r\n                vm.savings.show = true;\r\n\r\n                vm.savings.title = 'You just saved about ' + duration.humanize() + \"!\";\r\n                vm.savings.message = '';\r\n\r\n                for (let x = 0; x < vm.godo.length; x++) {\r\n                    if (vm.godo[x].time < time) {\r\n                        vm.savings.message = vm.godo[x].message;\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //////////////\r\n\r\n        function getWarnings(action) {\r\n            uSync8DashboardService.getSyncWarnings(action)\r\n                .then(function (result) {\r\n                    vm.warnings = result.data;\r\n                });\r\n        }\r\n\r\n        vm.importGroup = {};\r\n        vm.exportButtons = {};\r\n\r\n        function getHandlerGroups() {\r\n            vm.showEverything = false;\r\n            vm.groups = [];\r\n\r\n            uSync8DashboardService.getHandlerGroups(vm.currentSet)\r\n                .then(function (result) {\r\n\r\n                    var groups = result.data;\r\n                    var isSingle = Object.keys(groups).length === 1;\r\n\r\n                    _.forEach(groups, function (icon, group) {\r\n                        if (group == '_everything') {\r\n                            vm.showEverything = true;\r\n                        }\r\n                        else {\r\n\r\n                            var groupInfo = {\r\n                                name: group,\r\n                                group: group,\r\n                                icon: icon,\r\n                                key: group.toLowerCase(),\r\n                                state: 'init'\r\n                            }\r\n\r\n                            groupInfo.import = {\r\n                                defaultButton: {\r\n                                    labelKey: 'usync_import',\r\n                                    handler: function () { importGroup(groupInfo) }\r\n                                },\r\n                                subButtons: [{\r\n                                    labelKey: 'usync_importforce',\r\n                                    handler: function () { importForce(groupInfo) }\r\n                                }]\r\n                            };\r\n\r\n                            groupInfo.export = {\r\n                                defaultButton: {\r\n                                    labelKey: 'usync_export',\r\n                                    handler: function () { exportGroup(groupInfo) }\r\n                                }                                \r\n                            };\r\n\r\n\r\n                            if (isSingle) {\r\n                                groupInfo.export.subButtons = [{\r\n                                    labelKey: 'usync_exportClean',\r\n                                    handler: function () {\r\n                                        cleanExport();\r\n                                    }\r\n                                }];\r\n                            }\r\n\r\n                            vm.groups.push(groupInfo);\r\n\r\n                            if (group.toLowerCase() === \"forms\") {\r\n                                vm.hasuSyncForms = true;\r\n                            }\r\n                        }\r\n\r\n                    });\r\n\r\n                    if (vm.showEverything) {\r\n                        vm.groups.push(vm.everything);\r\n                    }\r\n\r\n                    if (!vm.hasuSyncForms) {\r\n                        vm.canHaveForms = canHaveForms();\r\n                    }\r\n\r\n                    vm.loading = false;\r\n                }, function (error) {\r\n                    vm.loading = false;\r\n                });\r\n        }\r\n\r\n        function importGroup(group) {\r\n            importItems(false, group);\r\n        }\r\n\r\n        //////////////\r\n\r\n        function openDetail(item) {\r\n\r\n            var options = {\r\n                item: item,\r\n                title: 'uSync Change',\r\n                view: \"/App_Plugins/uSync/changeDialog.html\",\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            };\r\n            editorService.open(options);\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            var umbType = typeName.substring(0, typeName.indexOf(','));\r\n            return umbType.substring(umbType.lastIndexOf('.') + 1);\r\n        }\r\n\r\n        function countChanges(changes) {\r\n            var count = 0;\r\n            angular.forEach(changes, function (val, key) {\r\n                if (val.change !== 'NoChange') {\r\n                    count++;\r\n                }\r\n            });\r\n\r\n            return count;\r\n        }\r\n\r\n        function calcPercentage(status) {\r\n            return (100 * status.count) / status.Total;\r\n        }\r\n\r\n        function showChange(change) {\r\n            return vm.showAll || (change !== 'NoChange' && change !== 'Removed');\r\n        }\r\n\r\n        function setFilter(type) {\r\n\r\n            if (vm.filter === type) {\r\n                vm.filter = '';\r\n            }\r\n            else {\r\n                vm.filter = type;\r\n            }\r\n        }\r\n\r\n        ///////////\r\n\r\n        /// resets all the flags, and messages to the start \r\n        function resetStatus(mode) {\r\n\r\n            vm.fresh = false;\r\n            vm.warnings = {};\r\n\r\n            vm.reported = vm.showAll = false;\r\n            vm.working = true;\r\n            vm.showSpinner = false;\r\n            vm.runmode = mode;\r\n            vm.hideLink = false;\r\n            vm.savings.show = false;\r\n\r\n            vm.status = {\r\n                count: 0,\r\n                total: 1,\r\n                message: 'Initializing',\r\n                handlers: vm.handlers\r\n            };\r\n\r\n            if (!vm.hub.active) {\r\n                vm.status.Message = 'Working ';\r\n                vm.showSpinner = true;\r\n            }\r\n\r\n            vm.update = {\r\n                message: '',\r\n                count: 0,\r\n                total: 1\r\n            };\r\n\r\n            // performance timer. \r\n            vm.perf = 0;\r\n\r\n\r\n            switch (mode) {\r\n                case modes.IMPORT:\r\n                    vm.action = 'Import';\r\n                    break;\r\n                case mode.REPORT:\r\n                    vm.action = 'Report';\r\n                    break;\r\n                case mode.EXPORT:\r\n                    vm.action = 'Export';\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // change the handler set\r\n        function changeSet() {\r\n            vm.reported = false;\r\n            initSet(vm.currentSet);\r\n        }\r\n\r\n        ////// SignalR things \r\n        function InitHub() {\r\n            uSyncHub.initHub(function (hub) {\r\n\r\n                vm.hub = hub;\r\n\r\n                vm.hub.on('add', function (data) {\r\n                    vm.status = data;\r\n                });\r\n\r\n                vm.hub.on('update', function (update) {\r\n                    vm.update = update;\r\n                });\r\n\r\n                vm.hub.start();\r\n            });\r\n        }\r\n\r\n        function getClientId() {\r\n            if ($.connection !== undefined) {\r\n                return $.connection.connectionId;\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        function canHaveForms() {\r\n            if (vm.hasuSyncForms) return false;\r\n        }\r\n\r\n        function loadSavingsMessages() {\r\n            vm.savings = { show: false, title: \"\", message: \"\" };\r\n            vm.godo = [\r\n                { time: 0, message: \"Worth checking\" },\r\n                { time: 180, message: \"Go make a cup of tea\" },\r\n                { time: 300, message: \"Go have a quick chat\" },\r\n                { time: 900, message: \"Go for a nice walk outside 🚶‍♀️\" },\r\n                { time: 3600, message: \"You deserve a break\" }\r\n            ];\r\n\r\n            var keys = [];\r\n            for (let n = 0; n < 5; n++) {\r\n                keys.push('usync_godo' + n);\r\n            }\r\n            localizationService.localizeMany(keys)\r\n                .then(function (values) {\r\n                    for (let n = 0; n < values.length; n++) {\r\n                        vm.godo[n].message = values[n];\r\n                    }\r\n                });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSync8Controller', uSyncController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function dashboardController($controller,\r\n        $scope, $timeout, navigationService, eventsService, uSync8DashboardService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.selectNavigationItem = function (item) {\r\n            eventsService.emit('usync-dashboard.tab.change', item);\r\n        }\r\n\r\n        vm.page = {\r\n            title: 'uSync',\r\n            description: '...',\r\n            navigation: [\r\n                {\r\n                    'name': 'uSync',\r\n                    'alias': 'uSync',\r\n                    'icon': 'icon-infinity',\r\n                    'view': Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/default.html',\r\n                    'active': true\r\n                },\r\n                {\r\n                    'name': 'Settings',\r\n                    'alias': 'settings',\r\n                    'icon': 'icon-settings',\r\n                    'view': Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/settings.html'\r\n                } \r\n            ]\r\n        };\r\n\r\n        $timeout(function () {\r\n            navigationService.syncTree({ tree: \"uSync\", path: \"-1\" });\r\n        });\r\n\r\n        uSync8DashboardService.getAddOns()\r\n            .then(function (result) {\r\n\r\n                vm.version = 'v' + result.data.version;\r\n                if (result.data.addOnString.length > 0) {\r\n                    vm.version += ' + ' + result.data.addOnString;\r\n                }\r\n\r\n                vm.page.description = vm.version;\r\n                vm.addOns = result.data.addOns;\r\n\r\n                var insertOffset = 1;\r\n                if (vm.version.indexOf('Complete') == -1) {\r\n                     insertOffset = 2;\r\n                     vm.page.navigation.push(\r\n                         {\r\n                             'name': 'Add ons',\r\n                             'alias': 'expansion',\r\n                             'icon': 'icon-box',\r\n                             'view': Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/expansion.html'\r\n                         });\r\n                }\r\n\r\n                vm.addOns.forEach(function (value, key) {\r\n                    if (value.view !== '') {\r\n                        vm.page.navigation.splice(vm.page.navigation.length - insertOffset, 0,\r\n                            {\r\n                                'name': value.displayName,\r\n                                'alias': value.alias,\r\n                                'icon': value.icon,\r\n                                'view': value.view\r\n                            });\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncSettingsDashboardController', dashboardController);\r\n})();"]}