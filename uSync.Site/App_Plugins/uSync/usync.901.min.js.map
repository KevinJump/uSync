{"version":3,"sources":["../../uSync/changedialog.controller.js","../../uSync/usync.hub.js","../../uSync/usync.service.js","../../uSync/components/usync.progressview.component.js","../../uSync/components/usync.reportview.component.js","../../uSync/settings/expansion.controller.js","../../uSync/settings/settings.controller.js","../../uSync/settings/usync.controller.js","../../uSync/backoffice/usync/usync.dashboard.controller.js"],"names":["angular","module","controller","$scope","assetsService","vm","this","getTypeName","typeName","substring","lastIndexOf","item","model","loadJs","then","details","forEach","detail","index","oldValueDiff","oldValue","newValueDiff","newValue","oldValueJson","Object","JSON","stringify","newValueJson","diff","JsDiff","diffWords","close","pageTitle","change","itemType","name","factory","$rootScope","$q","starting","callbacks","scripts","Umbraco","Sys","ServerVariables","umbracoSettings","umbracoPath","initHub","callback","push","undefined","$","connection","promises","script","all","length","hubSetup","pop","signalR","HubConnectionBuilder","withUrl","uSync","signalRHub","withAutomaticReconnect","configureLogging","LogLevel","Warning","build","hub","active","start","cb","catch","console","warn","e","cd","on","eventName","result","$apply","invoke","methodName","done","$http","serviceRoot","uSyncService","getSettings","get","getChangedSettings","getHandlers","getHandlerSetSettings","set","report","group","clientId","post","exportItems","clean","importItems","force","put","importItem","saveSettings","settings","getActionHandlers","options","action","reportHandler","handler","importHandler","importPost","actions","exportHandler","cleanExport","startProcess","finishProcess","getLoadedHandlers","getAddOns","getAddOnSplash","getHandlerGroups","getSyncWarnings","checkVersion","uSyncProgressViewComponent","templateUrl","application","applicationPath","bindings","status","update","hideLabels","controllerAs","calcPercentage","count","total","component","uSyncReportViewComponent","results","hideAction","hideLink","showAll","hideToggle","editorService","uSync8DashboardService","hasFailedDetail","some","Success","showChange","getIcon","success","getChangeClass","countChanges","changes","val","key","openDetail","title","view","open","$onInit","apply","applyState","error","loading","addons","data","overlayService","notificationsService","working","readonly","docslink","umbracoVersion","version","Message","openAppSettingsOverlay","appSetting","uSync:","toPascal","o","newO","origKey","newKey","value","Array","map","toCamel","hasOwnProperty","charAt","toUpperCase","slice","toString","constructor","appPluginsPath","content","disableBackdropClick","disableEscKey","hideSubmitButton","submit","confirm","setname","defaultSet","handlerSet","$controller","eventsService","uSyncHub","fresh","versionLoaded","reported","syncing","showSpinner","groups","perf","showAdvanced","hasuSyncForms","canHaveForms","modes","NONE","REPORT","IMPORT","EXPORT","performAction","actionMethod","resolve","reject","handlers","message","runHandlerAction","alias","getClientId","concat","performHandlerAction","resetStatus","getWarnings","reportButton","state","performance","now","ExceptionMessage","exceptionMessage","importForce","importButton","emit","time","duration","moment","savings","show","humanize","x","godo","calculateTimeSaved","exportGroup","exportButton","warnings","importGroup","mode","runmode","Count","Total","Handlers","connectionId","reportAction","defaultButton","labelKey","subButtons","submitButtonLabel","closeButtonLabel","versionInfo","IsCurrent","umbType","indexOf","icon","toLowerCase","$timeout","navigationService","selectNavigationItem","page","description","navigation","syncTree","tree","path","addOnString","addOns","insertOffset","splice","displayName"],"mappings":"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","file":"usync.901.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    function changeDialogController($scope, assetsService) {\r\n\r\n        var vm = this;\r\n        vm.item = $scope.model.item;\r\n\r\n        var jsdiff = 'lib/jsdiff/diff.min.js';\r\n\r\n        assetsService.loadJs(jsdiff, $scope).then(function () {\r\n            calcDiffs();\r\n        });\r\n\r\n        vm.close = close;\r\n        vm.getTypeName = getTypeName;\r\n        vm.pageTitle = pageTitle;\r\n\r\n        function close() {\r\n            if ($scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            return typeName.substring(typeName.lastIndexOf('.') + 1);\r\n        }\r\n\r\n        function pageTitle() {\r\n            return vm.item.change + ' ' + getTypeName(vm.item.itemType) + ' ' + vm.item.name;\r\n        }\r\n\r\n        function calcDiffs() {\r\n\r\n            vm.item.details.forEach(function (detail, index) {\r\n\r\n\r\n                let oldValueDiff = detail.oldValue === null ? \"\" : detail.oldValue;\r\n                let newValueDiff = detail.newValue === null ? \"\" : detail.newValue;\r\n\r\n                if (detail.oldValueJson instanceof Object) {\r\n                    oldValueDiff = JSON.stringify(detail.oldValue, null, 1);\r\n                }\r\n\r\n                if (detail.newValueJson instanceof Object) {\r\n                    newValueDiff = JSON.stringify(detail.newValue, null, 1);\r\n                }\r\n\r\n                detail.diff = JsDiff.diffWords(oldValueDiff, newValueDiff );\r\n            });\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncChangeDialogController', changeDialogController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function uSyncHub($rootScope, $q, assetsService) {\r\n\r\n        var starting = false;\r\n        var callbacks = []; \r\n\r\n        var scripts = [\r\n            Umbraco.Sys.ServerVariables.umbracoSettings.umbracoPath + '/lib/signalr/signalr.min.js']\r\n\r\n        var resource = {\r\n            initHub: initHub\r\n        };\r\n\r\n        return resource;\r\n\r\n        //////////////\r\n\r\n        function initHub(callback) {\r\n\r\n            callbacks.push(callback);\r\n\r\n            if (!starting) {\r\n                if ($.connection === undefined) {\r\n                    starting = true;\r\n\r\n                    var promises = [];\r\n                    scripts.forEach(function (script) {\r\n                        promises.push(assetsService.loadJs(script));\r\n                    });\r\n\r\n                    $q.all(promises)\r\n                        .then(function () {\r\n                            while (callbacks.length) {\r\n                                var cb = callbacks.pop();\r\n                                hubSetup(cb);\r\n                            }\r\n                            starting = false;\r\n                        });\r\n                }\r\n                else {\r\n                    while (callbacks.length) {\r\n                        var cb = callbacks.pop();\r\n                        hubSetup(cb);\r\n                    }\r\n                    starting = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        function hubSetup(callback) {\r\n\r\n            $.connection = new signalR.HubConnectionBuilder()\r\n                .withUrl(Umbraco.Sys.ServerVariables.uSync.signalRHub)\r\n                .withAutomaticReconnect()\r\n                .configureLogging(signalR.LogLevel.Warning)\r\n                .build();\r\n\r\n            var hub = {};\r\n\r\n            if ($.connection !== undefined) {\r\n                hub = {\r\n                    active: true,\r\n                    start: function (cb) {\r\n\r\n                        try {\r\n                            $.connection.start().then(function () {\r\n                                // console.info('Hub started', $.connection.connectionId);\r\n                                if (cb) {\r\n                                    cb(true);\r\n                                }\r\n                            }).catch(function () {\r\n                                console.warn('Failed to start hub');\r\n                                if (cb) {\r\n                                    cb(false);\r\n                                }\r\n                            });\r\n                        } catch (e) {\r\n                            console.warn('Could not setup signalR connection', e);\r\n                            if (cd) {\r\n                                cb(false);\r\n                            }\r\n                        }\r\n\r\n                    },\r\n                    on: function (eventName, callback) {\r\n                        $.connection.on(eventName, function (result) {\r\n                            $rootScope.$apply(function () {\r\n                                if (callback) {\r\n                                    callback(result);\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    invoke: function (methodName, callback) {\r\n                        $.connection.invoke(methodName)\r\n                            .done(function (result) {\r\n                                $rootScope.$apply(function () {\r\n                                    if (callback) {\r\n                                        callback(result);\r\n                                    }\r\n                                });\r\n                            });\r\n                    }\r\n                };\r\n            }\r\n            else {\r\n                hub = {\r\n                    on: function () { },\r\n                    invoke: function () { },\r\n                    start: function () { console.warn('no hub to start - missing signalR library ?'); }\r\n                };\r\n            }\r\n\r\n            return callback(hub);\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco.resources')\r\n        .factory('uSyncHub', uSyncHub);\r\n})();","/**\r\n * @ngdoc\r\n * @name uSync8Service\r\n * @requires $http\r\n * \r\n * @description provides the link to the uSync api elements\r\n *              required for the dashboard to function\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    function uSyncServiceController($http) {\r\n\r\n        var serviceRoot = Umbraco.Sys.ServerVariables.uSync.uSyncService;\r\n\r\n        var service = {\r\n            getSettings: getSettings,\r\n            getChangedSettings: getChangedSettings,\r\n            getHandlers: getHandlers,\r\n            getHandlerSetSettings: getHandlerSetSettings,\r\n\r\n            report: report,\r\n            exportItems: exportItems,\r\n            importItems: importItems,\r\n            importItem: importItem,\r\n            saveSettings: saveSettings,\r\n\r\n            getActionHandlers: getActionHandlers,\r\n            reportHandler: reportHandler,\r\n            importHandler: importHandler,\r\n            importPost: importPost,\r\n            exportHandler: exportHandler,\r\n            cleanExport: cleanExport,\r\n\r\n            startProcess: startProcess,\r\n            finishProcess: finishProcess,\r\n\r\n            getLoadedHandlers: getLoadedHandlers,\r\n            getAddOns: getAddOns,\r\n            getAddOnSplash: getAddOnSplash,\r\n\r\n            getHandlerGroups: getHandlerGroups,\r\n\r\n            getSyncWarnings: getSyncWarnings,\r\n\r\n            checkVersion: checkVersion\r\n\r\n        };\r\n\r\n        return service;\r\n\r\n        /////////////////////\r\n\r\n        function getSettings() {\r\n            return $http.get(serviceRoot + 'GetSettings');\r\n        }\r\n\r\n        function getChangedSettings() {\r\n            return $http.get(serviceRoot + 'GetChangedSettings');\r\n        }\r\n\r\n        function getHandlerSetSettings(set) {\r\n            return $http.get(serviceRoot + 'GetHandlerSetSettings?id=' + set);\r\n        }\r\n\r\n        function getHandlers() {\r\n            return $http.get(serviceRoot + 'GetHandlers');\r\n        }\r\n\r\n        function getLoadedHandlers() {\r\n            return $http.get(serviceRoot + 'GetLoadedHandlers');\r\n        }\r\n\r\n        function getAddOns() {\r\n            return $http.get(serviceRoot + 'GetAddOns');\r\n        }\r\n\r\n        function getAddOnSplash() {\r\n            return $http.get(serviceRoot + 'GetAddOnSplash');\r\n        }\r\n\r\n\r\n        function report(group, clientId) {\r\n            return $http.post(serviceRoot + 'report', { clientId: clientId, group: group });\r\n        }\r\n\r\n        function exportItems (clientId, clean) {\r\n            return $http.post(serviceRoot + 'export', { clientId: clientId, clean: clean });\r\n        }\r\n\r\n        function importItems(force, group, clientId) {\r\n            return $http.put(serviceRoot + 'import',\r\n                {\r\n                    force: force,\r\n                    group: group,\r\n                    clientId: clientId\r\n                });\r\n        }\r\n\r\n        function getSyncWarnings(action, group) {\r\n            return $http.post(serviceRoot + 'GetSyncWarnings?action=' + action, { group: group });\r\n        }\r\n        \r\n\r\n        function importItem(item) {\r\n            return $http.put(serviceRoot + 'importItem', item);\r\n        }\r\n\r\n        function saveSettings(settings) {\r\n            return $http.post(serviceRoot + 'savesettings', settings);\r\n        }\r\n\r\n        function getHandlerGroups() {\r\n            return $http.get(serviceRoot + 'GetHandlerGroups');\r\n        }\r\n\r\n        function checkVersion() {\r\n            return $http.get(serviceRoot + 'CheckVersion');\r\n        }\r\n\r\n\r\n        function getActionHandlers(options) {\r\n            return $http.post(serviceRoot + 'GetActionHandlers?action=' + options.action,\r\n                {\r\n                    group: options.group\r\n                });\r\n        }\r\n\r\n        function reportHandler(handler, options, clientId) {\r\n            return $http.post(serviceRoot + 'ReportHandler', {\r\n                handler: handler,\r\n                clientId: clientId\r\n            });\r\n        }\r\n\r\n        function importHandler(handler, options, clientId) {\r\n            return $http.post(serviceRoot + 'ImportHandler', {\r\n                handler: handler,\r\n                clientId: clientId,\r\n                force: options.force\r\n            });\r\n        }\r\n\r\n        function importPost(actions, options, clientId) {\r\n            return $http.post(serviceRoot + 'ImportPost', {\r\n                actions: actions,\r\n                clientId: clientId\r\n            });\r\n        }\r\n\r\n        function exportHandler(handler, options, clientId) {\r\n            return $http.post(serviceRoot + 'ExportHandler', {\r\n                handler: handler,\r\n                clientId: clientId\r\n            });\r\n        }\r\n\r\n        function startProcess(action) {\r\n            return $http.post(serviceRoot + 'StartProcess?action=' + action);\r\n        }\r\n\r\n        function finishProcess(action, actions) {\r\n            return $http.post(serviceRoot + 'FinishProcess?action=' + action, actions);\r\n        }\r\n\r\n        function cleanExport() {\r\n            return $http.post(serviceRoot + 'cleanExport');\r\n        }\r\n    \r\n    }\r\n\r\n    angular.module('umbraco.services')\r\n        .factory('uSync8DashboardService', uSyncServiceController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var uSyncProgressViewComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSync/components/usync.progressview.html',\r\n        bindings: {\r\n            status: '<',\r\n            update: '<',\r\n            hideLabels: '<'\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: uSyncProgressViewController\r\n    };\r\n\r\n    function uSyncProgressViewController() {\r\n        var vm = this;\r\n\r\n        vm.calcPercentage = calcPercentage;\r\n\r\n        function calcPercentage(status) {\r\n            if (status !== undefined) {\r\n                return (100 * status.count) / status.total;\r\n            }\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncProgressView', uSyncProgressViewComponent);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var uSyncReportViewComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSync/components/usync.reportview.html',\r\n        bindings: {\r\n            action: '<',\r\n            results: '<',\r\n            hideAction: '<',\r\n            hideLink: '<',\r\n            showAll: '<',\r\n            hideToggle: '<'\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: uSyncReportViewController\r\n    };\r\n\r\n    function uSyncReportViewController($scope, editorService, uSync8DashboardService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.showChange = showChange;\r\n        vm.getIcon = getIcon;\r\n        vm.getChangeClass = getChangeClass;\r\n        vm.getTypeName = getTypeName;\r\n        vm.countChanges = countChanges;\r\n        vm.openDetail = openDetail;\r\n        vm.showAll = vm.showAll || false;\r\n\r\n        vm.$onInit = function () {\r\n            vm.hideLink = vm.hideLink ? true : false;\r\n            vm.hideAction = vm.hideAction ? true : false;\r\n        };\r\n\r\n\r\n        vm.apply = apply;\r\n        vm.status = status;\r\n\r\n        /////////\r\n\r\n        function showChange(change) {\r\n            return vm.showAll || (change !== 'NoChange' && change !== 'Removed');\r\n        }\r\n\r\n        function hasFailedDetail(details) {\r\n            if (details == null || details.length == 0) {\r\n                return false;\r\n            }\r\n\r\n            return details.some(function (detail) {\r\n                return !detail.Success;\r\n            })\r\n        }\r\n\r\n        function getChangeClass(result) {\r\n            if (!result.success) {\r\n                return 'usync-change-row-Fail';\r\n            }\r\n            else if (hasFailedDetail(result.details)) {\r\n                return 'usync-change-row-Warn';\r\n            }\r\n\r\n            return 'usync-change-row-' + result.change;\r\n        }\r\n\r\n        function getIcon(result) {\r\n            if (!result.success) {\r\n                return \"icon-delete color-red\";\r\n            }\r\n            else if (hasFailedDetail(result.details)) {\r\n                return \"icon-alert color-yellow\";\r\n            }\r\n            switch (result.change) {\r\n                case 'NoChange':\r\n                    return 'icon-check color-grey';\r\n                case 'Update':\r\n                    return 'icon-check color-orange';\r\n                case 'Delete':\r\n                    return 'icon-delete color-red';\r\n                case 'Import':\r\n                    return 'icon-check color-green';\r\n                case 'Export':\r\n                    return 'icon-check color-green';\r\n                default:\r\n                    return 'icon-flag color-red';\r\n            }\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            if (typeName !== undefined) {\r\n                return typeName.substring(typeName.lastIndexOf('.') + 1);\r\n            }\r\n            return \"??\";\r\n        }\r\n\r\n        function countChanges(changes) {\r\n            var count = 0;\r\n            angular.forEach(changes, function (val, key) {\r\n                if (val.change !== 'NoChange') {\r\n                    count++;\r\n                }\r\n            });\r\n\r\n            return count;\r\n        }\r\n\r\n        function openDetail(item) {\r\n\r\n            var options = {\r\n                item: item,\r\n                title: 'uSync Change',\r\n                view: Umbraco.Sys.ServerVariables.application.applicationPath + \"App_Plugins/uSync/changedialog.html\",\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            };\r\n            editorService.open(options);\r\n        }\r\n\r\n        function apply(item) {\r\n\r\n            // do some application thing (apply just one item)\r\n            item.applyState = 'busy';\r\n            uSync8DashboardService.importItem(item)\r\n                .then(function (result) {\r\n                    item.applyState = 'success';\r\n                }, function (error) {\r\n                    console.error(error);\r\n                    item.applyState = 'error';\r\n                });\r\n        }\r\n\r\n        function status(item) {\r\n            if (item.applyState === undefined) return 'init';\r\n            return item.applyState;\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncReportView', uSyncReportViewComponent);\r\n})();","(function () {\r\n\r\n    'use strict';\r\n\r\n    function expansionController($scope, uSync8DashboardService) {\r\n\r\n        var vm = this;\r\n        vm.loading = true;\r\n        ///\r\n\r\n        uSync8DashboardService.getAddOnSplash()\r\n            .then(function (result) {\r\n                vm.addons = result.data;\r\n                vm.loading = false;\r\n            });\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncExpansionController', expansionController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function settingsController($scope,\r\n        uSync8DashboardService,\r\n        overlayService,\r\n        notificationsService) {\r\n\r\n        var vm = this;\r\n        vm.working = false;\r\n        vm.loading = true;\r\n        vm.readonly = true;\r\n\r\n        vm.docslink = \"https://docs.jumoo.co.uk/uSync/v9/settings/\";\r\n\r\n        vm.umbracoVersion = Umbraco.Sys.ServerVariables.application.version;\r\n\r\n        vm.saveSettings = saveSettings;\r\n        vm.openAppSettingsOverlay = openAppSettingsOverlay;\r\n\r\n        init();\r\n\r\n        ///////////\r\n\r\n        function init() {\r\n            getSettings();\r\n        }\r\n\r\n        ///////////\r\n        function getSettings() {\r\n\r\n            uSync8DashboardService.getSettings()\r\n                .then(function (result) {\r\n                    vm.settings = result.data;\r\n                    vm.loading = false;\r\n                    getHandlerSetSettings(vm.settings.defaultSet);\r\n                });\r\n        }\r\n\r\n        function getHandlerSetSettings(setname) {\r\n\r\n            uSync8DashboardService.getHandlerSetSettings(setname)\r\n                .then(function (result) {\r\n                    vm.handlerSet = result.data;\r\n                });\r\n\r\n        }\r\n\r\n\r\n        function saveSettings() {\r\n            vm.working = false;\r\n            uSync8DashboardService.saveSettings(vm.settings)\r\n                .then(function (result) {\r\n                    vm.working = false;\r\n                    notificationsService.success('Saved', 'Settings updated');\r\n                }, function (error) {\r\n                    notificationsService.error('Saving', error.data.Message);\r\n                });\r\n        }\r\n\r\n\r\n\r\n        function openAppSettingsOverlay() {\r\n\r\n            uSync8DashboardService.getChangedSettings()\r\n                .then(function (result) {\r\n                    var appSetting = {\r\n                        \"uSync:\": toPascal(result.data)\r\n                    }\r\n\r\n                    var options = {\r\n                        view: Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/settings.overlay.html',\r\n                        title: 'appsettings.json snipped',\r\n                        content: JSON.stringify(appSetting, null, 4),\r\n                        docslink: vm.docslink,\r\n                        disableBackdropClick: true,\r\n                        disableEscKey: true,\r\n                        hideSubmitButton: true,\r\n                        submit: function () {\r\n                            overlayService.close();\r\n                        }\r\n                    };\r\n\r\n                    overlayService.confirm(options);\r\n                });\r\n\r\n        }\r\n\r\n\r\n        function toPascal(o) {\r\n            var newO, origKey, newKey, value\r\n            if (o instanceof Array) {\r\n                return o.map(function (value) {\r\n                    if (typeof value === \"object\") {\r\n                        value = toCamel(value)\r\n                    }\r\n                    return value\r\n                })\r\n            } else {\r\n                newO = {}\r\n                for (origKey in o) {\r\n                    if (o.hasOwnProperty(origKey)) {\r\n                        newKey = (origKey.charAt(0).toUpperCase() + origKey.slice(1) || origKey).toString()\r\n                        value = o[origKey]\r\n                        if (value instanceof Array || (value !== null && value.constructor === Object)) {\r\n                            value = toPascal(value)\r\n                        }\r\n                        newO[newKey] = value\r\n                    }\r\n                }\r\n            }\r\n            return newO\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncSettingsController', settingsController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function uSyncController($scope, $q, $controller,\r\n        eventsService,\r\n        overlayService,\r\n        notificationsService,\r\n        editorService,\r\n        uSync8DashboardService,\r\n        uSyncHub) {\r\n\r\n        var vm = this;\r\n        vm.fresh = true;\r\n        vm.loading = true;\r\n        vm.versionLoaded = false; \r\n        vm.working = false;\r\n        vm.reported = false;\r\n        vm.syncing = false;\r\n        vm.hideLink = false;\r\n        vm.showSpinner = false;\r\n\r\n        vm.groups = [];\r\n        vm.perf = 0;\r\n\r\n        vm.showAdvanced = false;\r\n\r\n        vm.hasuSyncForms = false; \r\n\r\n        vm.canHaveForms = false;\r\n\r\n        var modes = {\r\n            NONE: 0,\r\n            REPORT: 1,\r\n            IMPORT: 2,\r\n            EXPORT: 3\r\n        };\r\n\r\n        vm.runmode = modes.NONE;\r\n\r\n        vm.showAll = false;\r\n        vm.status = {};\r\n        vm.reportAction = '';\r\n\r\n        vm.importButton = {\r\n            state: 'init',\r\n            defaultButton: {\r\n                labelKey: 'usync_import',\r\n                handler: importItems\r\n            },\r\n            subButtons: [{\r\n                labelKey: 'usync_importforce',\r\n                handler: function () {\r\n                    importForce('');\r\n                }\r\n            }]\r\n        };\r\n\r\n        vm.reportButton = {\r\n            state: 'init',\r\n            defaultButton: {\r\n                labelKey: 'usync_report',\r\n                handler: function () {\r\n                    report('');\r\n                }\r\n            },\r\n            subButtons: []\r\n        };\r\n\r\n        vm.exportButton = {\r\n            state: 'init',\r\n            defaultButton: {\r\n                labelKey: 'usync_export',\r\n                handler: function () {\r\n                    exportItems(false);\r\n                }\r\n            },\r\n            subButtons: [{\r\n                labelKey: 'usync_exportClean',\r\n                handler: function () {\r\n                    cleanExport();\r\n                }\r\n            }]\r\n        }\r\n\r\n        vm.report = report;\r\n        vm.versionInfo = {\r\n            IsCurrent: true\r\n        };\r\n\r\n        vm.exportItems = exportItems;\r\n        vm.importForce = importForce;\r\n        vm.importItems = importItems;\r\n        vm.importGroup = importGroup;\r\n        vm.exportGroup = exportGroup;\r\n\r\n        vm.getTypeName = getTypeName;\r\n\r\n        vm.showChange = showChange;\r\n        vm.countChanges = countChanges;\r\n        vm.calcPercentage = calcPercentage;\r\n        vm.openDetail = openDetail;\r\n\r\n        vm.savings = { show: false, title: \"\", message: \"\" };\r\n        vm.godo = [\r\n            { time: 0, message: \"Worth checking\" },\r\n            { time: 180, message: \"Go make a cup of tea\" },\r\n            { time: 300, message: \"Go have a quick chat\" },\r\n            { time: 900, message: \"Go for a nice walk outside 🚶‍♀️\" },\r\n            { time: 3600, message: \"You deserve a break\" }\r\n        ];\r\n\r\n        init();\r\n\r\n        function init() {\r\n            InitHub();\r\n            getHandlerGroups();\r\n\r\n            // just so there is something there when you start \r\n            uSync8DashboardService.getHandlers()\r\n                .then(function (result) {\r\n                    vm.handlers = result.data;\r\n                    vm.status.handlers = vm.handlers;\r\n                });\r\n\r\n            uSync8DashboardService.checkVersion()\r\n                .then(function (result) {\r\n                    vm.versionLoaded = true;\r\n                    vm.versionInfo = result.data;\r\n                });\r\n        }\r\n\r\n        function performAction(options, actionMethod, cb) {\r\n\r\n            return $q(function (resolve, reject) {\r\n                uSync8DashboardService.getActionHandlers(options)\r\n                    .then(function (result) {\r\n                        vm.status.handlers = result.data;\r\n                        performHandlerAction(vm.status.handlers, actionMethod, options, cb)\r\n                            .then(function () {\r\n                                resolve();\r\n                            }, function (error) {\r\n                                reject(error)\r\n                            })\r\n                    });\r\n            });\r\n        }\r\n\r\n        function performHandlerAction(handlers, actionMethod, options, cb) {\r\n\r\n   \r\n            return $q(function (resolve, reject) {\r\n\r\n                var index = 0;\r\n                vm.status.message = 'Starting ' + options.action;\r\n\r\n                uSync8DashboardService.startProcess(options.action)\r\n                    .then(function () {\r\n                        runHandlerAction(handlers[index])\r\n                    });\r\n\r\n                function runHandlerAction(handler) {\r\n\r\n                    vm.status.message = handler.name;\r\n\r\n                    handler.status = 1;\r\n                    actionMethod(handler.alias, options, getClientId())\r\n                        .then(function (result) {\r\n\r\n                            vm.results = vm.results.concat(result.data.actions);\r\n\r\n                            handler.status = 2;\r\n                            handler.changes = countChanges(result.data.actions);\r\n\r\n                            index++;\r\n                            if (index < handlers.length) {\r\n                                runHandlerAction(handlers[index]);\r\n                            }\r\n                            else {\r\n\r\n                                vm.status.message = 'Finishing ' + options.action;\r\n\r\n                                uSync8DashboardService.finishProcess(options.action, vm.results)\r\n                                    .then(function () {\r\n                                        resolve();\r\n                                    });\r\n                            }\r\n                        }, function (error) {\r\n                            // error in this handler ? \r\n                            // do we want to carry on with the other ones or just stop?\r\n                            reject(error);\r\n                        });\r\n                }\r\n            });\r\n        } \r\n\r\n        function report(group) {\r\n\r\n            vm.results = [];\r\n\r\n            resetStatus(modes.REPORT);\r\n            getWarnings('report');\r\n            vm.reportButton.state = 'busy';\r\n\r\n            var options = {\r\n                action: 'report',\r\n                group: group\r\n            };\r\n\r\n            var start = performance.now();\r\n\r\n            performAction(options, uSync8DashboardService.reportHandler)\r\n                .then(function (results) {\r\n                    vm.working = false;\r\n                    vm.reported = true;\r\n                    vm.perf = performance.now() - start;\r\n                    vm.status.message = 'Report complete';\r\n                    vm.reportButton.state = 'success';\r\n                }, function (error) {\r\n                    vm.reportButton.state = 'error';\r\n                    notificationsService.error('Error', error.data.ExceptionMessage ?? error.data.exceptionMessage);\r\n                });\r\n        }\r\n\r\n        function importForce(group) {\r\n            importItems(true, group);\r\n        }\r\n\r\n        function importItems(force, group) {\r\n            vm.results = [];\r\n            resetStatus(modes.IMPORT);\r\n            getWarnings('import');\r\n\r\n            vm.importButton.state = 'busy';\r\n\r\n            var options = {\r\n                action: 'import',\r\n                group: group,\r\n                force: force\r\n            };\r\n\r\n            var start = performance.now();\r\n\r\n            performAction(options, uSync8DashboardService.importHandler)\r\n                .then(function (results) {\r\n\r\n                    vm.status.message = 'Post import actions';\r\n\r\n                    uSync8DashboardService.importPost(vm.results, getClientId())\r\n                        .then(function (results) {\r\n                            vm.working = false;\r\n                            vm.reported = true;\r\n                            vm.perf = performance.now() - start;\r\n                            vm.importButton.state = 'success';\r\n                            eventsService.emit('usync-dashboard.import.complete');\r\n                            calculateTimeSaved(vm.results);\r\n                            vm.status.message = 'Complete';\r\n                        });\r\n                }, function (error) {\r\n                    notificationsService.error('Error', error.data.ExceptionMessage ?? error.data.exceptionMessage);\r\n                });\r\n        }\r\n\r\n        function exportItems() {\r\n            exportGroup('');\r\n        }\r\n\r\n        function exportGroup(group) {\r\n\r\n\r\n            vm.results = [];\r\n            resetStatus(modes.EXPORT);\r\n            vm.exportButton.state = 'busy';\r\n\r\n            var options = {\r\n                action: 'export',\r\n                group: group\r\n            };\r\n\r\n            var start = performance.now();\r\n\r\n            performAction(options, uSync8DashboardService.exportHandler)\r\n                .then(function (results) {\r\n                    vm.status.message = 'Export complete';\r\n                    vm.working = false;\r\n                    vm.reported = true;\r\n                    vm.perf = performance.now() - start;\r\n\r\n                    vm.exportButton.state = 'success';\r\n                    vm.savings.show = true;\r\n                    vm.savings.title = 'All items exported.';\r\n                    vm.savings.message = 'Now go wash your hands 🧼!';\r\n                    eventsService.emit('usync-dashboard.export.complete');\r\n                }, function (error) {\r\n                    notificationsService.error('Error', error.data.ExceptionMessage ?? error.data.exceptionMessage);\r\n                });\r\n        }\r\n     \r\n        function cleanExport() {\r\n\r\n            overlayService.open({\r\n                title: 'Clean Export',\r\n                content: 'Are you sure ? A clean export will delete all the contents of the uSync folder. You will loose any stored delete or rename actions.',\r\n                disableBackdropClick: true,\r\n                disableEscKey: true,\r\n                submitButtonLabel: 'Yes run a clean export',\r\n                closeButtonLabel: 'No, close',\r\n                submit: function () {\r\n                    overlayService.close();\r\n\r\n                    uSync8DashboardService.cleanExport()\r\n                        .then(function () {\r\n                            exportItems();\r\n                        });\r\n                },\r\n                close: function () {\r\n                    overlayService.close();\r\n                }\r\n            })\r\n        }\r\n\r\n        // add a little joy to the process.\r\n        function calculateTimeSaved(results) {\r\n            var changes = countChanges(results);\r\n            var time = changes * 26.5;\r\n\r\n            var duration = moment.duration(time, 'seconds');\r\n\r\n            if (time >= 180) {\r\n                vm.savings.show = true;\r\n                vm.savings.title = 'You just saved ' + duration.humanize() + \"!\";\r\n                vm.savings.message = '';\r\n\r\n                for (let x = 0; x < vm.godo.length; x++) {\r\n                    if (vm.godo[x].time < time) {\r\n                        vm.savings.message = vm.godo[x].message;\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //////////////\r\n\r\n        function getWarnings(action) {\r\n            uSync8DashboardService.getSyncWarnings(action)\r\n                .then(function (result) {\r\n                    vm.warnings = result.data;\r\n                });\r\n        }\r\n\r\n        vm.importGroup = {};\r\n\r\n        function getHandlerGroups() {\r\n            uSync8DashboardService.getHandlerGroups()\r\n                .then(function (result) {\r\n                    angular.forEach(result.data, function (icon, group) {\r\n\r\n                        vm.groups.push({\r\n                            name: group,\r\n                            icon: icon,\r\n                            key: group.toLowerCase()\r\n                        });\r\n\r\n\r\n                        vm.importGroup[group] = {\r\n                            state: 'init',\r\n                            defaultButton: {\r\n                                labelKey: 'usync_import',\r\n                                handler: function () { importGroup(group) }\r\n                            },\r\n                            subButtons: [{\r\n                                labelKey: 'usync_importforce',\r\n                                handler: function () { importForce(group) }\r\n                            }]\r\n                        }\r\n\r\n                        if (group.toLowerCase() === \"forms\") {\r\n                            vm.hasuSyncForms = true;\r\n                        }\r\n\r\n                    });\r\n\r\n                    if (!vm.hasuSyncForms) {\r\n                        vm.canHaveForms = canHaveForms();\r\n                    }\r\n\r\n                    vm.loading = false;\r\n                }, function (error) {\r\n                    vm.loading = false;\r\n                });\r\n        }\r\n\r\n        function importGroup(group) {\r\n            importItems(false, group);\r\n        }\r\n\r\n        //////////////\r\n\r\n        function openDetail(item) {\r\n\r\n            var options = {\r\n                item: item,\r\n                title: 'uSync Change',\r\n                view: \"/App_Plugins/uSync/changeDialog.html\",\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            };\r\n            editorService.open(options);\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            var umbType = typeName.substring(0, typeName.indexOf(','));\r\n            return umbType.substring(umbType.lastIndexOf('.') + 1);\r\n        }\r\n\r\n        function countChanges(changes) {\r\n            var count = 0;\r\n            angular.forEach(changes, function (val, key) {\r\n                if (val.change !== 'NoChange') {\r\n                    count++;\r\n                }\r\n            });\r\n\r\n            return count;\r\n        }\r\n\r\n        function calcPercentage(status) {\r\n            return (100 * status.count) / status.Total;\r\n        }\r\n\r\n        function showChange(change) {\r\n            return vm.showAll || (change !== 'NoChange' && change !== 'Removed');\r\n        }\r\n\r\n        function setFilter(type) {\r\n\r\n            if (vm.filter === type) {\r\n                vm.filter = '';\r\n            }\r\n            else {\r\n                vm.filter = type;\r\n            }\r\n        }\r\n\r\n        ///////////\r\n\r\n        /// resets all the flags, and messages to the start \r\n        function resetStatus(mode) {\r\n\r\n            vm.fresh = false;\r\n            vm.warnings = {};\r\n\r\n            vm.reported = vm.showAll = false;\r\n            vm.working = true;\r\n            vm.showSpinner = false; \r\n            vm.runmode = mode;\r\n            vm.hideLink = false;\r\n            vm.savings.show = false;\r\n\r\n            vm.status = {\r\n                Count: 0,\r\n                Total: 1,\r\n                Message: 'Initializing',\r\n                Handlers: vm.handlers\r\n            };\r\n\r\n            if (!vm.hub.active) {\r\n                vm.status.Message = 'Working ';\r\n                vm.showSpinner = true;\r\n            }\r\n\r\n            vm.update = {\r\n                Message: '',\r\n                Count: 0,\r\n                Total: 1\r\n            };\r\n\r\n            // performance timer. \r\n            vm.perf = 0;\r\n\r\n\r\n            switch (mode) {\r\n                case modes.IMPORT:\r\n                    vm.action = 'Import';\r\n                    break;\r\n                case mode.REPORT:\r\n                    vm.action = 'Report';\r\n                    break;\r\n                case mode.EXPORT:\r\n                    vm.action = 'Export';\r\n                    break;\r\n            }\r\n        }\r\n\r\n        ////// SignalR things \r\n        function InitHub() {\r\n            uSyncHub.initHub(function (hub) {\r\n\r\n                vm.hub = hub;\r\n\r\n                vm.hub.on('add', function (data) {\r\n                    vm.status = data;\r\n                });\r\n\r\n                vm.hub.on('update', function (update) {\r\n                    vm.update = update;\r\n                });\r\n\r\n                vm.hub.start();\r\n            });\r\n        }\r\n\r\n        function getClientId() {\r\n            if ($.connection !== undefined) {\r\n                return $.connection.connectionId;\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        function canHaveForms() {\r\n\r\n            if (vm.hasuSyncForms) return false;\r\n            /*\r\n\r\n            try {\r\n\r\n                // check to see if umbraco.forms is installed. \r\n                $controller('UmbracoForms.Dashboards.FormsController', { $scope: {} }, true)\r\n                return true;\r\n            }\r\n            catch {\r\n                return false;\r\n            }*/\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSync8Controller', uSyncController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function dashboardController($controller,\r\n        $scope, $timeout, navigationService, eventsService, uSync8DashboardService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.selectNavigationItem = function (item) {\r\n            eventsService.emit('usync-dashboard.tab.change', item);\r\n        }\r\n\r\n        vm.page = {\r\n            title: 'uSync',\r\n            description: '...',\r\n            navigation: [\r\n                {\r\n                    'name': 'uSync',\r\n                    'alias': 'uSync',\r\n                    'icon': 'icon-infinity',\r\n                    'view': Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/default.html',\r\n                    'active': true\r\n                },\r\n                {\r\n                    'name': 'Settings',\r\n                    'alias': 'settings',\r\n                    'icon': 'icon-settings',\r\n                    'view': Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/settings.html'\r\n                } \r\n            ]\r\n        };\r\n\r\n        $timeout(function () {\r\n            navigationService.syncTree({ tree: \"uSync\", path: \"-1\" });\r\n        });\r\n\r\n        uSync8DashboardService.getAddOns()\r\n            .then(function (result) {\r\n\r\n                vm.version = 'v' + result.data.version;\r\n                if (result.data.addOnString.length > 0) {\r\n                    vm.version += ' + ' + result.data.addOnString;\r\n                }\r\n\r\n                vm.page.description = vm.version;\r\n                vm.addOns = result.data.addOns;\r\n\r\n                var insertOffset = 1;\r\n                if (vm.version.indexOf('Complete') == -1) {\r\n                     insertOffset = 2;\r\n                     vm.page.navigation.push(\r\n                         {\r\n                             'name': 'Add ons',\r\n                             'alias': 'expansion',\r\n                             'icon': 'icon-box',\r\n                             'view': Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/expansion.html'\r\n                         });\r\n                }\r\n\r\n                vm.addOns.forEach(function (value, key) {\r\n                    if (value.view !== '') {\r\n                        vm.page.navigation.splice(vm.page.navigation.length - insertOffset, 0,\r\n                            {\r\n                                'name': value.displayName,\r\n                                'alias': value.alias,\r\n                                'icon': value.icon,\r\n                                'view': value.view\r\n                            });\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncSettingsDashboardController', dashboardController);\r\n})();"]}